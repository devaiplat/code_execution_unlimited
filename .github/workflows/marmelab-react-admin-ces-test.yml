name: marmelab/react-admin
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  typecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Lint
      run: make lint
    - name: Build
      run: make build
    - name: Zip packages build artifact
      run: zip packages-build.zip -r examples/data-generator/dist packages/*/dist
    - name: Upload packages build artifact
      uses: actions/upload-artifact@v4
      with:
        name: packages-build
        path: packages-build.zip
        retention-days: 1
  simple-example-typecheck:
    runs-on: ubuntu-latest
    needs:
    - typecheck
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Download packages build artifact
      uses: actions/download-artifact@v4
      with:
        name: packages-build
    - name: Unzip packages build artifact
      run: unzip -o -u packages-build.zip
    - name: Type check simple example
      run: cd examples/simple && yarn type-check
  doc-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Jekyll build
      run: docker run -v="${PWD}/docs:/site" bretfisher/jekyll build
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Unit Tests (ces) (ces)
      run: make test-unit
      env:
        CI: true
  e2e-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: e2e Tests (ces) (ces)
      run: make test-e2e
      env:
        CI: true
  e-commerce:
    runs-on: ubuntu-latest
    needs:
    - typecheck
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Download packages build artifact
      uses: actions/download-artifact@v4
      with:
        name: packages-build
    - name: Unzip packages build artifact
      run: unzip -o -u packages-build.zip
    - name: Build e-commerce
      run: make build-demo
      env:
        NODE_OPTIONS: --max-old-space-size=6163
    - name: Zip demo build
      run: zip demo-build.zip -r examples/demo/dist examples/demo/package.json
    - name: Upload demo build artifact
      uses: actions/upload-artifact@v4
      with:
        name: demo-build
        path: demo-build.zip
        retention-days: 1
  crm:
    runs-on: ubuntu-latest
    needs:
    - typecheck
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Download packages build artifact
      uses: actions/download-artifact@v4
      with:
        name: packages-build
    - name: Unzip packages build artifact
      run: unzip -o -u packages-build.zip
    - name: Build crm
      run: make build-crm
  greenframe:
    runs-on: ubuntu-latest
    name: GreenFrame
    needs:
    - e-commerce
    if: true
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Download demo build
      uses: actions/download-artifact@v4
      with:
        name: demo-build
    - name: Unzip demo build
      run: unzip -o -u demo-build.zip
    - name: Run e-commerce
      run: cd ./examples/demo/dist && python3 -m http.server 4173 &
    - name: Run GreenFrame Analysis
      uses: marmelab/greenframe-action@1.0.0
      env:
        GREENFRAME_SECRET_TOKEN: ${{secrets.GREENFRAME_SECRET_TOKEN}}
  create-react-admin:
    runs-on: ubuntu-latest
    name: create-react-admin
    needs: []
    if: true
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: yarn
    - name: Install dependencies
      run: yarn
    - name: Build create-react-admin
      run: make build-create-react-admin install
    - name: Create new project
      run: ./node_modules/.bin/create-react-admin myadmin --data-provider ra-data-fakerest --auth-provider local-auth-provider --install npm
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run the tests (ces) (ces)
      working-directory: ./myadmin
      run: npm run test
