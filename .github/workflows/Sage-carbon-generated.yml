name: Sage/carbon
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version: '>=20.9.0 20'
    - run: npm ci
    - run: npx prettier --check './src/**/*.{js,jsx,ts,tsx}'
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - run: npm run lint
    - run: npm run type-check
  test:
    name: Test with Node ${{ matrix.node }} (${{ matrix.shard }}, 4)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node:
        - 18
        - 20
        shard:
        - 1
        - 2
        - 3
        - 4
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: npm
    - name: Install dependencies
      run: npm ci
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run test shard (ces) (ces)
      run: |
        npm test -- --ci --maxWorkers=4 --shard=${{ matrix.shard }}/4 --colors --coverage --coverageReporters="json"
    - name: Rename shard coverage report
      run: |
        mv coverage/coverage-final.json coverage/${{ matrix.shard }}.json
    - name: Upload coverage report for shard
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-node-${{ matrix.node }}-shard-${{ matrix.shard }}
        path: coverage/${{ matrix.shard }}.json
        retention-days: 1
  get-thresholds:
    name: Get global coverage thresholds
    runs-on: ubuntu-latest
    needs: test
    outputs:
      globalThresholds: ${{ steps.extract-thresholds.outputs.globalThresholds }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - id: extract-thresholds
      run: |
        echo "globalThresholds=$(jq -r -c '.global' coverage-thresholds.json)" >> $GITHUB_OUTPUT
  check-coverage:
    name: Check global coverage with Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    needs: get-thresholds
    env:
      globalThresholds: ${{ needs.get-thresholds.outputs.globalThresholds }}
    strategy:
      fail-fast: false
      matrix:
        node:
        - 18
        - 20
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: npm
    - name: Install nyc
      run: npm install nyc@17.0.0 --save-dev
    - name: Download shard coverage reports
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-node-${{ matrix.node }}-shard-*
        path: coverage
        merge-multiple: true
    - name: Merge shard coverage reports
      run: |
        npx nyc merge coverage merged-coverage.json
    - name: Output report
      run: |
        npx nyc report --temp-dir coverage --reporter text >> $GITHUB_STEP_SUMMARY
    - name: Validate coverage threshold
      run: |
        npx nyc check-coverage --temp-dir coverage \
          --functions ${{ fromJSON(env.globalThresholds).functions }} \
          --branches ${{ fromJSON(env.globalThresholds).branches }} \
          --lines ${{ fromJSON(env.globalThresholds).lines }} \
          --statements ${{ fromJSON(env.globalThresholds).statements }} \
          && (echo "✅ Global coverage meets global thresholds" && exit 0) \
          || (echo "❌ Global coverage does not meet global thresholds!" && exit 1)
