name: openobserve/openobserve
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  COLUMNS: 150
  ZO_ROOT_USER_EMAIL: root@example.com
  ZO_ROOT_USER_PASSWORD: Complexpass#123
  ZO_BASE_URL: http://localhost:5080/
jobs:
  api_integration_tests:
    name: api_integration_tests
    runs-on: ubuntu-latest
    steps:
    - name: Remove unused tools
      run: |
        sudo rm -rf /usr/share/dotnet

        sudo rm -rf /opt/ghc

        sudo rm -rf "/usr/local/share/boost"

        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Checkout git repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2024-07-07
    - name: Setup Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: 21.12
    - name: Build OpenObserve debug binary
      run: cargo build --features mimalloc
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11.6
    - name: Setup rye
      uses: eifinger/setup-rye@v4
      with:
        enable-cache: true
        working-directory: tests/api-testing/
        version: 0.27.0
    - name: Start OpenObserve
      run: target/debug/openobserve &
    - name: Wait for start
      run: sleep 15
    - name: Pin cpython
      run: rye pin cpython@3.11.6
      working-directory: tests/api-testing/
    - name: Rye sync
      run: rye sync
      working-directory: tests/api-testing/
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: rye run pytest --force-sugar
      working-directory: tests/api-testing/
