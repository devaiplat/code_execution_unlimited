name: ESMValGroup/ESMValTool
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
defaults:
  run:
    shell: bash -l {0}
jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - 3.10
        - 3.11
    name: Linux Python ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: esmvaltool
        environment-file: environment.yml
        python-version: ${{ matrix.python-version }}
        miniforge-version: latest
        miniforge-variant: Mambaforge
        use-mamba: true
    - run: mkdir -p develop_test_linux_artifacts_python_${{ matrix.python-version }}
    - name: Record versions
      run: |
        mamba --version 2>&1 | tee develop_test_linux_artifacts_python_${{ matrix.python-version }}/conda_version.txt

        python -V 2>&1 | tee develop_test_linux_artifacts_python_${{ matrix.python-version }}/python_version.txt
    - name: Install ESMValTool
      run: pip install -e .[develop] 2>&1 | tee develop_test_linux_artifacts_python_${{ matrix.python-version }}/install.txt
    - name: Install Julia dependencies
      run: esmvaltool install Julia
    - name: Install development version of ESMValCore
      run: |
        cd ..

        git clone https://github.com/ESMValGroup/ESMValCore.git

        cd ESMValCore

        pip install -e .[develop]
    - name: Run flake8
      run: flake8
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: pytest -n 2 -m "not installation" 2>&1 | tee develop_test_linux_artifacts_python_${{ matrix.python-version }}/test_report.txt
    - name: Upload artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Develop_Test_Linux_python_${{ matrix.python-version }}
        path: develop_test_linux_artifacts_python_${{ matrix.python-version }}
