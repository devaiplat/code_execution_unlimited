name: customeros/customeros
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-global
  cancel-in-progress: false
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Cache npm dependencies
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: >
          ~/.npm

          ./packages/apps/frontera/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: >
          ${{ runner.os }}-node-
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm ci
      working-directory: ./packages/apps/frontera
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
      working-directory: ./packages/apps/frontera
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Playwright tests (ces) (ces)
      run: npx playwright test
      working-directory: ./packages/apps/frontera
      env:
        PROD_FE_TEST_USER_URL: ${{ secrets.PROD_FE_TEST_USER_URL }}
    - name: Read test results (ces)
      if: always()
      id: test_results
      run: |
        TEST_RESULTS=$(cat test-results.txt)

        echo "results<<EOF" >> $GITHUB_OUTPUT

        echo "$TEST_RESULTS" >> $GITHUB_OUTPUT

        echo "EOF" >> $GITHUB_OUTPUT
      working-directory: ./packages/apps/frontera
    - name: Create Linear issues for failed tests (ces)
      if: failure()
      env:
        LINEAR_API_KEY_SILVIU_FE_TESTS: ${{ secrets.LINEAR_API_KEY_SILVIU_FE_TESTS }}
        LINEAR_PRODUCT_TEAMID: ${{ secrets.LINEAR_PRODUCT_TEAMID }}
        LINEAR_LABEL_BUG: ${{ secrets.LINEAR_LABEL_BUG }}
        LINEAR_USER_SILVIU: ${{ secrets.LINEAR_USER_SILVIU }}
      run: |
        cd ./packages/apps/frontera


        FAILED_TESTS_FILE="failed-tests.txt"

        if [ ! -f "$FAILED_TESTS_FILE" ] || [ ! -s "$FAILED_TESTS_FILE" ]; then
          echo "failed-tests.txt not found or empty, using test-results.txt"
          FAILED_TESTS_FILE="test-results.txt"
        fi


        echo "---Content of $FAILED_TESTS_FILE:---"

        cat "$FAILED_TESTS_FILE"

        echo "---End of file content---"


        ISSUE_COUNT=0

        ISSUE_INFO=""

        while IFS= read -r line || [ -n "$line" ]; do
          echo "Processing line: $line"
          if [[ $line == *"❌"* ]]; then
            TEST_NAME=$(echo "$line" | sed 's/.*❌[^:]*: //')
            echo "Creating issue for test: $TEST_NAME"

            JSON_DATA="{\"query\":\"mutation IssueCreate(\$input: IssueCreateInput!) { issueCreate(input: \$input) { success issue { id title identifier url } } }\",\"variables\":{\"input\":{\"title\":\"$TEST_NAME\",\"description\":\"$TEST_NAME\",\"teamId\":\"$LINEAR_PRODUCT_TEAMID\",\"labelIds\":[\"$LINEAR_LABEL_BUG\"],\"assigneeId\":\"$LINEAR_USER_SILVIU\"}}}"

            echo "Sending request to Linear API..."
            RESPONSE=$(curl -s \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $LINEAR_API_KEY_SILVIU_FE_TESTS" \
            --data "$JSON_DATA" \
            https://api.linear.app/graphql)

            echo "Linear API Response: $RESPONSE"

            if echo "$RESPONSE" | grep -q '"success":true'; then
              echo "Successfully created issue for: $TEST_NAME"
              ISSUE_COUNT=$((ISSUE_COUNT + 1))
              IDENTIFIER=$(echo "$RESPONSE" | jq -r '.data.issueCreate.issue.identifier')
              URL=$(echo "$RESPONSE" | jq -r '.data.issueCreate.issue.url')
              ISSUE_INFO="${ISSUE_INFO}<${URL}|${IDENTIFIER}: ${TEST_NAME}>\n"
            else
              echo "Failed to create issue for: $TEST_NAME"
              echo "Error response: $RESPONSE"
              ISSUE_INFO="${ISSUE_INFO}Failed to create Linear issue: ${TEST_NAME}\n"
            fi
          else
            echo "Line does not match pattern, skipping: $line"
          fi
        done < "$FAILED_TESTS_FILE"


        echo "Finished processing failed tests"

        echo "Total issues created: $ISSUE_COUNT"

        echo "ISSUE_INFO<<EOF" >> $GITHUB_ENV

        echo "$ISSUE_INFO" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV
    - name: Send test results to Slack (ces)
      if: always()
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        RESULTS="${{ steps.test_results.outputs.results }}"


        # Count passed and failed tests

        PASSED_TESTS=$(echo "$RESULTS" | grep -c "✅" || true)

        FAILED_TESTS=$(echo "$RESULTS" | grep -c "❌" || true)

        TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))


        # Create summary statistic

        SUMMARY="✅ $PASSED_TESTS passed, ❌ $FAILED_TESTS failed ($TOTAL_TESTS total)"


        # Initialize MESSAGE with the common part

        MESSAGE="<$BUILD_URL|Playwright Test Results>:\n$SUMMARY"


        # Format Linear Issues (only if there are any)

        LINEAR_ISSUES=""

        if [ "${{ env.ISSUE_INFO }}" != "" ]; then
          LINEAR_ISSUES=$(echo -e "${{ env.ISSUE_INFO }}" | sed '/^$/d' | sort)
          MESSAGE="$MESSAGE\n\nLinear Issues:\n$LINEAR_ISSUES"
        fi


        curl --fail -X POST -H 'Content-type: application/json' --data "{
          \"text\": \"$MESSAGE\"
        }" ${{ secrets.SLACK_FE_TESTS_WEBHOOK_URL }}
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: ./packages/apps/frontera/playwright-report
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-trace
        path: ./packages/apps/frontera/playwright-trace
