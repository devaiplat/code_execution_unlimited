name: single-cell-data/TileDB-SOMA
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  ci:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Bootstrap
      run: cd apis/r && tools/r-ci.sh bootstrap
    - name: Set additional repositories (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        rversion <- paste(strsplit(as.character(getRversion()), split = '\\.')[[1L]][1:2], collapse = '.')

        codename <-  system('. /etc/os-release; echo ${VERSION_CODENAME}', intern = TRUE)

        repo <- "https://tiledb-inc.r-universe.dev"

        (opt <- sprintf('options(repos = c("%s/bin/linux/%s/%s", "%s", getOption("repos")))', repo, codename, rversion, repo))

        cat(opt, "\n", file = "~/.Rprofile", append = TRUE)
      shell: Rscript {0}
    - name: Install tiledb-r
      run: cd apis/r && Rscript tools/install-tiledb-r.R
    - name: Dependencies
      run: cd apis/r && Rscript -e "remotes::install_deps(dependencies = TRUE, upgrade = FALSE)"
    - name: CMake
      uses: lukka/get-cmake@latest
    - name: MkVars
      run: mkdir ~/.R && echo "CXX17FLAGS=-Wno-deprecated-declarations -Wno-deprecated" > ~/.R/Makevars
    - name: Build and install libtiledbsoma
      run: sudo scripts/bld --prefix=/usr/local --no-tiledb-deprecated=true && sudo ldconfig
    - name: Install R-tiledbsoma
      run: |
        cd apis/r

        R CMD build --no-build-vignettes --no-manual .

        FILE=$(ls -1t *.tar.gz | head -n 1)

        R CMD INSTALL $FILE
    - name: Show R package versions
      run: Rscript -e 'tiledbsoma::show_package_versions()'
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: pip
        cache-dependency-path: ./apis/python/setup.py
    - name: Install tiledbsoma
      run: pip -v install -e apis/python[dev] -C "--build-option=--no-tiledb-deprecated"
    - name: Show Python package versions
      run: |
        python -c 'import tiledbsoma; tiledbsoma.show_package_versions()'

        python scripts/show-versions.py
    - name: Update Packages
      run: Rscript -e 'update.packages(ask=FALSE)'
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Interop Tests (ces) (ces)
      run: python -m pytest apis/system/tests/
      env:
        TILEDB_SOMA_INIT_BUFFER_BYTES: 33554432
