name: open-dollar/od-contracts
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true
jobs:
  lint:
    name: Run Linters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18.x
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - name: Install dependencies
      run: yarn --frozen-lockfile --network-concurrency 1
    - run: yarn lint:check
  forge:
    name: Run Unit and E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 20.x
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
        cache: true
    - name: Install forge dependencies
      run: forge install
    - name: Install yarn dependencies
      run: yarn install --frozen-lockfile
    - name: Build
      run: forge build
    - name: Create env file
      run: |
        touch .env

        echo ARB_MAINNET_RPC="${{ secrets.ARB_MAINNET_RPC }}" >> .env

        echo ARB_MAINNET_DEPLOYER_PK="${{ secrets.ARB_MAINNET_DEPLOYER_PK }}" >> .env

        echo ARB_SEPOLIA_RPC="${{ secrets.ARB_SEPOLIA_RPC }}" >> .env

        echo ARB_SEPOLIA_DEPLOYER_PK="${{ secrets.ARB_SEPOLIA_DEPLOYER_PK }}" >> .env

        cat .env
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      shell: bash
      run: yarn test
