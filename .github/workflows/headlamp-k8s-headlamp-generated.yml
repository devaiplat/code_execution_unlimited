name: headlamp-k8s/headlamp
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  contents: read
env:
  HEADLAMP_RUN_INTEGRATION_TESTS: true
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7
      with:
        go-version: 1.22.*
    - name: Install dependencies
      run: |
        cd backend

        go mod download
    - name: Start cluster
      uses: medyagh/setup-minikube@d8c0eb871f6f455542491d86a574477bd3894533
    - name: Check cluster status and enable headlamp addon
      run: |
        minikube status

        minikube addons enable headlamp

        kubectl wait deployment -n headlamp headlamp --for condition=Available=True --timeout=30s    
    - name: setup and run golangci-lint
      uses: golangci/golangci-lint-action@d6238b002a20823d52840fda27e2d4891c5952dc
      with:
        version: v1.54
        working-directory: backend
        skip-cache: true
        args: --timeout 3m
    - name: Lint, Build & Check
      run: |
        cd $GITHUB_WORKSPACE

        make backend
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests and calculate code coverage (ces) (ces)
      run: |
        set -x

        cd backend

        go test ./... -coverprofile=coverage.out -covermode=atomic -coverpkg=./...

        go tool cover -html=coverage.out -o backend_coverage.html

        testcoverage_full=$(go tool cover -func=coverage.out)

        testcoverage=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')

        testcoverage_full_base64=$(echo "$testcoverage_full" | base64 -w 0)

        echo "Code coverage: $testcoverage"

        echo "$testcoverage_full"

        echo "coverage=$testcoverage" >> $GITHUB_ENV

        echo "testcoverage_full_base64=$testcoverage_full_base64" >> $GITHUB_ENV

        echo "cleaning up..."

        rm ~/.config/Headlamp/kubeconfigs/config
      shell: bash
    - name: Upload coverage report as artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: ./backend/backend_coverage.html
    - name: Get base branch code coverage
      if: ${{ github.event_name }} == 'pull_request'
      run: |
        set -x

        if [[ -z "${{ github.base_ref }}" ]]; then
          echo "Base branch is empty. Skipping code coverage comparison."
          exit 0
        fi


        cd backend

        base_branch="${{ github.base_ref }}"

        testcoverage="${{ env.coverage }}"

        git fetch origin "$base_branch"

        git checkout "origin/$base_branch"

        go test ./... -coverprofile=base_coverage.out -covermode=atomic -coverpkg=./...

        base_coverage=$(go tool cover -func=base_coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')

        echo "Base branch code coverage: $base_coverage"

        echo "base_coverage=$base_coverage" >> $GITHUB_ENV
      shell: bash
    - name: Compare code coverage
      if: ${{ github.event_name }} == 'pull_request'
      run: |
        set -x

        if [[ -z "${{ github.base_ref }}" ]]; then
          echo "Base branch is empty. Skipping code coverage comparison."
          exit 0
        fi


        testcoverage="${{ env.coverage }}"

        base_coverage="${{ env.base_coverage }}"

        if [[ -z $testcoverage || -z $base_coverage ]]; then
          echo "testcoverage or base_coverage is not set. Cannot calculate coverage difference."
          exit 1
        fi


        echo "testcoverage=$testcoverage"

        echo "base_coverage=$base_coverage"

        echo "$testcoverage - $base_coverage"


        coverage_diff=$(echo "$testcoverage - $base_coverage" | bc)

        echo "Coverage change: $coverage_diff"

        echo "coverage_diff=$coverage_diff" >> $GITHUB_ENV
      shell: bash
    - name: Comment on PR
      if: ${{ github.event_name }} == 'pull_request'
      run: |
        set -x

        if [[ -z "${{ github.base_ref }}" ]]; then
          echo "Base branch is empty. Skipping code coverage comparison."
          exit 0
        fi

        testcoverage="${{ env.coverage }}"

        testcoverage_full_base64="${{ env.testcoverage_full_base64 }}"

        testcoverage_full=$(echo "$testcoverage_full_base64" | base64 --decode)


        base_coverage="${{ env.base_coverage }}"

        coverage_diff="${{ env.coverage_diff }}"

        artifact_url=${{ steps.upload-artifact.outputs.artifact-url }}


        if (( $(echo "$coverage_diff < 0" | bc -l) )); then
          emoji="ðŸ˜ž" # Decreased coverage
        else
          emoji="ðŸ˜ƒ" # Increased or unchanged coverage
        fi


        comment="Backend Code coverage changed from $base_coverage% to $testcoverage%. Change: $coverage_diff% $emoji."

        echo "$comment"


        # Add the full coverage report as a collapsible section

        comment="${comment}


        <details>
          <summary>Coverage report</summary>

        \`\`\`

        $testcoverage_full

        \`\`\`


        </details>


        [Html coverage report download]($artifact_url)

        "


        echo "$comment"


        if [[ "${{github.event.pull_request.head.repo.full_name}}" == "${{github.repository}}" ]]; then
          # Forks (like dependabot ones) do not have permission to comment on the PR,
          #   so do not fail the action if this fails.
          gh pr comment ${{github.event.number}} --body "${comment}" || true
        else
          echo "Pull request raised from a fork. Skipping comment."
        fi
      env:
        GITHUB_TOKEN: ${{ github.token }}
