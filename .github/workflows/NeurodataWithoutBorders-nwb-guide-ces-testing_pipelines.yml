name: NeurodataWithoutBorders/nwb-guide
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  run:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          label: environments/environment-MAC-apple-silicon.yml
        - os: macos-13
          label: environments/environment-MAC-intel.yml
        - os: windows-latest
          label: environments/environment-Windows.yml
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - run: git fetch --prune --unshallow --tags
    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: nwb-guide
        use-mamba: true
    - name: Set environment cache date
      id: get-date
      run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
      shell: bash
    - name: Cache Conda env
      uses: actions/cache@v4
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-${{ runner.arch }}-${{steps.get-date.outputs.today }}-${{ hashFiles(matrix.label) }}-${{ env.CACHE_NUMBER }}
      id: cache
    - if: steps.cache.outputs.cache-hit != 'true'
      name: Create and activate environment
      run: mamba env update --name nwb-guide --file ${{ matrix.label }}
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Install GUIDE
      run: npm ci --verbose
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Install testing dependencies (ces) (ces)
      run: pip install pytest pytest-cov
    - name: Manually remove matplotlib
      run: pip uninstall matplotlib --yes
    - name: Get ephy_testing_data current head hash (ces)
      id: ephys
      run: echo "::set-output name=HASH_EPHY_DATASET::$(git ls-remote https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git HEAD | cut -f1)"
    - name: Cache ephys dataset - ${{ steps.ephys.outputs.HASH_EPHY_DATASET }}
      uses: actions/cache@v4
      id: cache-ephys-datasets
      with:
        path: ./ephy_testing_data
        key: ephys-datasets-${{ matrix.os }}-${{ steps.ephys.outputs.HASH_EPHY_DATASET }}
    - name: Get ophys_testing_data current head hash (ces)
      id: ophys
      run: echo "::set-output name=HASH_OPHYS_DATASET::$(git ls-remote https://gin.g-node.org/CatalystNeuro/ophys_testing_data.git HEAD | cut -f1)"
    - name: Cache ophys dataset - ${{ steps.ophys.outputs.HASH_OPHYS_DATASET }}
      uses: actions/cache@v4
      id: cache-ophys-datasets
      with:
        path: ./ophys_testing_data
        key: ophys-datasets-${{ matrix.os }}-${{ steps.ophys.outputs.HASH_OPHYS_DATASET }}
    - name: Get behavior_testing_data current head hash (ces)
      id: behavior
      run: echo "::set-output name=HASH_BEHAVIOR_DATASET::$(git ls-remote https://gin.g-node.org/CatalystNeuro/behavior_testing_data.git HEAD | cut -f1)"
    - name: Cache behavior dataset - ${{ steps.behavior.outputs.HASH_BEHAVIOR_DATASET }}
      uses: actions/cache@v4
      id: cache-behavior-datasets
      with:
        path: ./behavior_testing_data
        key: behavior-datasets-${{ matrix.os }}-${{ steps.behavior.outputs.HASH_behavior_DATASET }}
    - if: matrix.os != 'ubuntu-latest'
      name: Run tests (ces)
      run: npm run test:pipelines
      env:
        GIN_DATA_DIRECTORY: ${{ github.workspace }}
    - if: matrix.os == 'ubuntu-latest'
      name: Run tests with xvfb (ces)
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- npm run test:pipelines
      env:
        GIN_DATA_DIRECTORY: ${{ github.workspace }}
    - name: Archive Pipeline Test Screenshots (ces)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-pipelines-screenshots-${{ matrix.os }}
        path: docs/assets/tutorials/test-pipelines
        retention-days: 1
        overwrite: true
