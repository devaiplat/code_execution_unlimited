name: turbot/steampipe
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  STEAMPIPE_UPDATE_CHECK: false
  SPIPETOOLS_PG_CONN_STRING: ${{ secrets.SPIPETOOLS_PG_CONN_STRING }}
  SPIPETOOLS_TOKEN: ${{ secrets.SPIPETOOLS_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  STEAMPIPE_LOG: info
jobs:
  goreleaser:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Unshallow
      run: git fetch
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
    - name: Fetching Go Cache Paths
      id: go-cache-paths
      run: |
        echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT

        echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
    - name: Go Build Cache
      id: build-cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      continue-on-error: true
      with:
        version: v1.52.2
        args: --timeout=15m --config=.golangci.yml
        skip-pkg-cache: true
        skip-build-cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run CLI Unit Tests (ces) (ces)
      run: |
        go clean -testcache

        go test -timeout 30s ./... -test.v
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        version: latest
        args: release --clean --snapshot --parallelism 2 --config=.acceptance.goreleaser.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Move build artifacts
      run: |
        mkdir ~/artifacts

        mv $GITHUB_WORKSPACE/dist/steampipe_linux_amd64.tar.gz ~/artifacts/linux.tar.gz

        mv $GITHUB_WORKSPACE/dist/steampipe_darwin_amd64.zip ~/artifacts/darwin.zip
    - name: List Build Artifacts
      run: ls -l ~/artifacts
    - name: Save Linux Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-linux
        path: ~/artifacts/linux.tar.gz
        if-no-files-found: error
        overwrite: true
    - name: Save MacOS Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-darwin
        path: ~/artifacts/darwin.zip
        if-no-files-found: error
        overwrite: true
  acceptance_test:
    name: Test
    needs: goreleaser
    strategy:
      fail-fast: false
      matrix:
        platform:
        - ubuntu-latest
        test_block:
        - migration
        - brew
        - installation
        - plugin
        - connection_config
        - service
        - settings
        - ssl
        - blank_aggregators
        - search_path
        - chaos_and_query
        - dynamic_schema
        - dynamic_aggregators
        - cache
        - mod_install
        - mod_vars
        - mod
        - mod_require
        - check
        - performance
        - config_precedence
        - introspection
        - cloud
        - snapshot
        - dashboard
        - dashboard_parsing_validation
        - schema_cloning
        - exit_codes
        - force_stop
        exclude:
        - platform: macos-latest
          test_block: migration
        - platform: macos-latest
          test_block: force_stop
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
    - name: Prepare for downloads
      id: prepare-for-downloads
      run: |
        mkdir ~/artifacts
    - name: Download Linux Build Artifacts
      uses: actions/download-artifact@v4
      if: ${{ matrix.platform == 'ubuntu-latest' }}
      with:
        name: build-artifact-linux
        path: ~/artifacts
    - name: Download Darwin Build Artifacts
      uses: actions/download-artifact@v4
      if: ${{ matrix.platform == 'macos-latest' }}
      with:
        name: build-artifact-darwin
        path: ~/artifacts
    - name: Extract Darwin Artifacts and Install Binary
      if: ${{ matrix.platform == 'macos-latest' }}
      run: |
        mkdir ~/build

        unzip ~/artifacts/darwin.zip -d ~/build
    - name: Extract Ubuntu Artifacts and Install Binary
      if: ${{ matrix.platform == 'ubuntu-latest' }}
      run: |
        mkdir ~/build

        tar -xf ~/artifacts/linux.tar.gz -C ~/build
    - name: Set PATH
      run: |
        echo "PATH=$PATH:$HOME/build:$GTIHUB_WORKSPACE/tests/acceptance/lib/bats-core/libexec" >> $GITHUB_ENV
    - name: Go install jd
      run: |
        go install github.com/josephburnett/jd@latest
    - name: Install DB
      id: install-db
      continue-on-error: false
      run: |
        steampipe query "select 1"

        steampipe plugin install chaos chaosdynamic --progress=false
    - name: Save Install DB Logs
      uses: actions/upload-artifact@v3
      with:
        name: install-db-logs-${{ matrix.test_block }}-${{ matrix.platform }}
        path: ~/.steampipe/logs
        if-no-files-found: error
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Test Suite (ces) (ces)
      id: run-test-suite
      timeout-minutes: 15
      continue-on-error: true
      run: |
        chmod +x $GITHUB_WORKSPACE/tests/acceptance/run.sh

        $GITHUB_WORKSPACE/tests/acceptance/run.sh ${{ matrix.test_block }}.bats

        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT

        echo ">> here"
    - name: Save Test Suite Logs (ces)
      uses: actions/upload-artifact@v3
      with:
        name: test-logs-${{ matrix.test_block }}-${{ matrix.platform }}
        path: ~/.steampipe/logs
        if-no-files-found: error
    - name: Check Test Passed/Failed (ces)
      if: ${{ success() }}
      continue-on-error: false
      run: |
        if [ ${{ steps.run-test-suite.outputs.exit_code }} -eq 0 ]; then
          exit 0
        else
          exit 1
        fi
  clean_up:
    name: Clean Up Artifacts
    needs: acceptance_test
    if: true
    runs-on: ubuntu-latest
    steps:
    - name: Clean up Linux Build
      uses: geekyeggo/delete-artifact@v5
      with:
        name: build-artifact-linux
        failOnError: true
    - name: Clean up Darwin Build
      uses: geekyeggo/delete-artifact@v5
      with:
        name: build-artifact-darwin
        failOnError: true
