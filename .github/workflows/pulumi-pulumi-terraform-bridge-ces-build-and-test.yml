name: pulumi/pulumi-terraform-bridge
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  test:
    strategy:
      matrix:
        go-version:
        - 1.22.x
        - 1.23.x
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        feature-flags:
        - DEFAULT
        - PULUMI_TF_BRIDGE_ACCURATE_BRIDGE_PREVIEW
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install pulumi
      uses: pulumi/actions@v5
      with:
        pulumi-version: dev
    - name: Check out source code
      uses: actions/checkout@master
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache-dependency-path: >
          **/go.sum
    - name: export feature flags
      run: echo ${{ matrix.feature-flags }}=true >> $GITHUB_ENV
      if: ${{ matrix.platform != 'windows-latest' && matrix.feature-flags != 'DEFAULT' }}
    - name: export feature flags
      run: echo ${{ matrix.feature-flags }}=true >> $env:GITHUB_ENV
      if: ${{ matrix.platform == 'windows-latest' && matrix.feature-flags != 'DEFAULT' }}
    - name: Build
      run: make build
    - name: Build PF
      run: cd pf && make build
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      run: make test
    - name: Test PF (ces)
      run: cd pf && make test
    - name: Test Dynamic (ces)
      run: cd dynamic && make test
    - name: Upload coverage reports to Codecov
      if: ${{ env.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out source code
      uses: actions/checkout@master
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x
        cache-dependency-path: >
          **/go.sum
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        skip-cache: true
        skip-pkg-cache: true
        skip-build-cache: true
        version: v1.60
    - name: Lint
      run: make lint
