name: avo-hq/avo
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  RAILS_ENV: test
  PGHOST: localhost
  PGUSER: postgres
  PGPORT: 5432
  POSTGRES_HOST: localhost
  POSTGRES_USERNAME: postgres
  POSTGRES_PORT: 5432
  BUNDLE_PATH_RELATIVE_TO_CWD: true
  AVO_LICENSE_KEY: license_123
  BUNDLE_RUBYGEMS__PKG__GITHUB__COM: adrianthedev:${{secrets.GH_REGISTRY_AVO_FILTERS_TOKEN}}
  COVERAGE: true
jobs:
  feature_specs:
    strategy:
      matrix:
        ruby:
        - 3.1.4
        - 3.3.0
        rails:
        - 6.1
        - 7.1
        - 8.0
    runs-on: ubuntu-latest
    env:
      RAILS_VERSION: ${{matrix.rails}}
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/rails_${{ matrix.rails }}_ruby_${{ matrix.ruby }}.gemfile
    services:
      postgres:
        image: postgres:10.8
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler: default
        ruby-version: ${{ matrix.ruby }}
    - uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-test-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: >
          ${{ runner.os }}-test-gems-${{ hashFiles('**/Gemfile.lock') }}
    - name: Bundle install
      run: |
        bundle config path vendor/bundle

        bundle install --jobs 4 --retry 3

        bin/rails db:create

        bin/rails db:migrate
    - name: Get yarn cache directory path
      id: test-yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      id: test-yarn-cache
      with:
        path: ${{ steps.test-yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-test-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: >
          ${{ runner.os }}-test-yarn-${{ hashFiles('**/yarn.lock') }}
    - name: Yarn install the dummy app
      run: |
        cd spec/dummy

        yarn
    - name: Yarn install
      run: yarn
    - name: Build assets
      env:
        RAILS_ENV: production
        NODE_ENV: production
      run: |
        yarn build:js

        yarn build:css

        yarn build:custom-js
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      id: run_tests
      run: bundle exec rspec spec/features
    - uses: actions/upload-artifact@v4
      with:
        name: coverage_features_${{ matrix.rails }}_ruby_${{ matrix.ruby }}
        path: coverage/.resultset.json
    - uses: actions/upload-artifact@v4
      if: always() && steps.run_tests.outcome == 'failure'
      with:
        name: rspec_failed_screenshots_rails_${{ matrix.rails }}_ruby_${{ matrix.ruby }}
        path: ./spec/dummy/tmp/screenshots
