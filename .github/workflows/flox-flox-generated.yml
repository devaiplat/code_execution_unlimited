name: flox/flox
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      pkgdb: ${{ steps.filter.outputs.pkgdb }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        base: ${{ github.event.merge_group.base_ref || 'main' }}
        ref: ${{ github.event.merge_group.head_ref || github.ref }}
        filters: >
          pkgdb:
            - ".github/workflows/ci.yml"
            - "pkgdb/**"
            - "pkgs/**"
            - "Justfile"
            - "flake.nix"
            - "flake.lock"
            - "shells/**"
  pkgdb-dev:
    name: Pkgdb
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    if: true
    needs:
    - changes
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04-8core
        - macos-14-xlarge
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_ACCESS_TOKEN: ${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}
        SUBSTITUTER: ${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}
        SUBSTITUTER_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}
        SSH_KEY: ${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}
    - name: Build
      run: nix develop -L --no-update-lock-file --command just build-pkgdb
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      run: nix develop -L --no-update-lock-file --command just test-pkgdb
    - name: Build Docs
      run: |
        nix develop -L                   \
          --no-update-lock-file          \
          --command make -C pkgdb docs;
        chmod -c -R +rX "pkgdb/docs/"|while read line; do
          echo "::warning title=Invalid file permissions fixed::$line";
        done
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
      with:
        path: pkgdb/docs
    - name: Deploy to GitHub Pages
      if: ${{ matrix.os == 'ubuntu-22.04-8core' }}
      id: deployment
      uses: actions/deploy-pages@v4
  cli-dev:
    name: dev
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04-8core
        - macos-14-xlarge
        test-tags:
        - activate
        - containerize
        - catalog
        - '!activate,!containerize,!catalog'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_ACCESS_TOKEN: ${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}
        SUBSTITUTER: ${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}
        SUBSTITUTER_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}
        SSH_KEY: ${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: >
          ~/.cargo/bin/

          ~/.cargo/registry/index/

          ~/.cargo/registry/cache/

          ~/.cargo/git/db/

          target/
        key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: cargo-${{ runner.os }}-
    - name: Build
      run: nix develop -L --no-update-lock-file --command just build-cli
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: CLI Unit Tests (ces) (ces)
      if: ${{ matrix.test-tags == '!activate,!containerize,!catalog' }}
      env:
        RUST_BACKTRACE: 1
      run: nix develop -L --no-update-lock-file --command just impure-tests
    - name: CLI Integration Tests (ces)
      timeout-minutes: 30
      env:
        RUST_BACKTRACE: 1
        AUTH0_FLOX_DEV_CLIENT_SECRET: ${{ secrets.MANAGED_AUTH0_FLOX_DEV_CLIENT_SECRET }}
      run: |
        nix develop -L --no-update-lock-file --command just integ-tests --\
          --filter-tags '"${{ matrix.test-tags }}"'
    - name: Capture process tree for failing tests (ces)
      if: ${{ failure() }}
      run: nix develop -L --no-update-lock-file --command pstree
  nix-build:
    name: Nix build
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      closure-size-x86_64-linux: ${{ steps.closure.outputs.closure-size-x86_64-linux }}
      closure-size-aarch64-linux: ${{ steps.closure.outputs.closure-size-aarch64-linux }}
      closure-size-x86_64-darwin: ${{ steps.closure.outputs.closure-size-x86_64-darwin }}
      closure-size-aarch64-darwin: ${{ steps.closure.outputs.closure-size-aarch64-darwin }}
      flox-version: ${{ steps.version.outputs.flox-version }}
    strategy:
      fail-fast: false
      matrix:
        system:
        - x86_64-linux
        - x86_64-darwin
        - aarch64-linux
        - aarch64-darwin
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_ACCESS_TOKEN: ${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}
        SUBSTITUTER: ${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}
        SUBSTITUTER_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}
        SSH_KEY: ${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}
        TAILSCALE_URL: ${{    vars.MANAGED_TAILSCALE_URL }}
        TAILSCALE_AUTH_KEY: ${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}
        REMOTE_BUILDERS: ${{    vars.MANAGED_REMOTE_BUILDERS }}
        SYSTEM: ${{ matrix.system }}
    - name: Build
      id: build
      run: |
        for package in '.#packages.${{ matrix.system }}.flox-pkgdb' '.#packages.${{ matrix.system }}.flox-cli' '.#packages.${{ matrix.system }}.flox' '.#packages.${{ matrix.system }}.flox-cli-tests'; do
          echo "Building $package ..."
          git clean -xfd .
          if nix path-info                 \
              --store "$CONFIGURE_NIX_SUBSTITUTER"  \
              --eval-store auto            \
              --builders ''                \
              -j0                          \
                "$package".outPath ; then
             echo "  -> Paths for $package already exists in the substituter";
          else
            nix build -L             \
              --no-update-lock-file  \
              --print-out-paths      \
                "$package";
          fi
        done
    - name: Get closure size
      id: closure
      run: |
        NIX="nix --accept-flake-config --experimental-features 'nix-command flakes'"

        CLOSURE_SIZE=$(
          ssh github@$REMOTE_SERVER \
            -oLogLevel=ERROR \
            -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
              "$NIX build github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox &&" \
              "$NIX path-info -r --json ./result" \
          | jq '[.[].narSize]|add'
        )

        echo "closure-size-${{ matrix.system }}=$CLOSURE_SIZE" >> "$GITHUB_OUTPUT"
    - name: Get Flox version
      id: version
      run: |
        FLOX_VERSION="${FLOX_VERSION:=$(git describe)}"

        FLOX_VERSION="${FLOX_VERSION:1}"

        echo "flox-version=$FLOX_VERSION" >> $GITHUB_OUTPUT
  trigger-flox-installers-workflow:
    name: Build installers
    if: true
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs:
    - nix-build
    steps:
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Trigger flox-installers workflow
      id: trigger-workflow
      uses: convictional/trigger-workflow-and-wait@v1.6.5
      with:
        owner: flox
        repo: flox-installers
        github_token: ${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}
        github_user: floxbot
        workflow_file_name: ci.yml
        ref: main
        wait_interval: 10
        client_payload: '{"FLOX_SRC":"github:flox/flox/${{ github.event.pull_request.head.sha || github.sha }}"}'
        propagate_failure: true
        trigger_workflow: true
        wait_workflow: true
    - name: Create shipit artifact
      if: ${{ success() || failure() }}
      run: |
        jq -n \
          --arg "flox_installers_workflow_id" "${{ steps.trigger-workflow.outputs.workflow_id }}" \
          --arg "flox_closure_size-x86_64-linux" "${{ needs.nix-build.outputs.closure-size-x86_64-linux }}" \
          --arg "flox_closure_size-aarch64-linux" "${{ needs.nix-build.outputs.closure-size-aarch64-linux }}" \
          --arg "flox_closure_size-x86_64-darwin" "${{ needs.nix-build.outputs.closure-size-x86_64-darwin }}" \
          --arg "flox_closure_size-aarch64-darwin" "${{ needs.nix-build.outputs.closure-size-aarch64-darwin }}" \
          --arg "flox_version" "${{ needs.nix-build.outputs.flox-version }}" \
          '$ARGS.named' > shipit.json
        cat shipit.json | jq
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: shipit
        path: shipit.json
  report-failure:
    name: Report Failure
    runs-on: ubuntu-latest
    if: true
    needs:
    - nix-build
    - pkgdb-dev
    - cli-dev
    steps:
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: Something broke CI for flox/flox on main
        SLACK_FOOTER: Thank you for caring
        SLACK_WEBHOOK: ${{ secrets.MANAGED_SLACK_WEBHOOK }}
        SLACK_USERNAME: GitHub
        SLACK_ICON_EMOJI: ':poop:'
        SLACK_COLOR: '#ff2800'
        SLACK_LINK_NAMES: true
  nix-build-bats-tests:
    name: remote
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs:
    - nix-build
    strategy:
      fail-fast: false
      matrix:
        system:
        - x86_64-linux
        - x86_64-darwin
        - aarch64-linux
        - aarch64-darwin
        test-tags:
        - containerize
        - '!containerize'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup upterm session
      if: ${{ (true == inputs.enableUpterm) && (inputs.breakOnJob == github.job) }}
      uses: owenthereal/action-upterm@v1
      with:
        limit-access-to-actor: true
        limit-access-to-users: ${{ inputs.allowedUptermUsers }}
        wait-timeout-minutes: 15
    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_ACCESS_TOKEN: ${{ secrets.MANAGED_FLOXBOT_GITHUB_ACCESS_TOKEN_REPO_SCOPE }}
        SUBSTITUTER: ${{    vars.MANAGED_CACHE_PUBLIC_S3_BUCKET }}
        SUBSTITUTER_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_SECRET_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.MANAGED_CACHE_PUBLIC_AWS_SECRET_ACCESS_KEY }}
        SSH_KEY: ${{ secrets.MANAGED_FLOXBOT_SSH_KEY }}
        TAILSCALE_URL: ${{    vars.MANAGED_TAILSCALE_URL }}
        TAILSCALE_AUTH_KEY: ${{ secrets.MANAGED_TAILSCALE_AUTH_KEY }}
        REMOTE_BUILDERS: ${{    vars.MANAGED_REMOTE_BUILDERS }}
        SYSTEM: ${{ matrix.system }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Bats Tests (./#flox-cli-tests) (ces) (ces)
      timeout-minutes: 30
      run: |
        git clean -xfd

        ssh github@$REMOTE_SERVER \
          -oLogLevel=ERROR \
          -oUserKnownHostsFile=$REMOTE_SERVER_USER_KNOWN_HOSTS_FILE \
          nix run \
              --accept-flake-config \
              --extra-experimental-features '"nix-command flakes"' \
              'github:flox/flox/${{ github.sha }}#packages.${{ matrix.system }}.flox-cli-tests' -- -- \
                --filter-tags '"${{ matrix.test-tags }}"'
