name: bpg/terraform-provider-proxmox
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Filter paths
      uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
      id: filter
      with:
        filters: >
          go:
            - '**/*.go'
    - name: Setup Go
      if: ${{ steps.filter.outputs.go == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache-dependency-path: '**/*.sum'
    - name: Get dependencies
      if: ${{ steps.filter.outputs.go == 'true' }}
      run: go mod download
    - name: Build
      if: ${{ steps.filter.outputs.go == 'true' }}
      run: go vet . && go build -v .
  test:
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Filter paths
      uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
      id: filter
      with:
        filters: >
          go:
            - '**/*.go'
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache-dependency-path: '**/*.sum'
    - name: Get dependencies
      if: ${{ steps.filter.outputs.go == 'true' }}
      run: go mod download
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set up gotestfmt (ces) (ces)
      run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest
    - name: Unit tests (ces)
      if: ${{ steps.filter.outputs.go == 'true' }}
      timeout-minutes: 10
      run: go test -json -v ./... 2>&1 | tee /tmp/gotest.log | gotestfmt -hide empty-packages
    - name: Upload test log (ces)
      uses: actions/upload-artifact@v4
      if: ${{ steps.filter.outputs.go == 'true' }}
      with:
        name: test-log
        path: /tmp/gotest.log
    - name: Check for uncommitted changes in generated docs
      run: make docs && git diff --exit-code
