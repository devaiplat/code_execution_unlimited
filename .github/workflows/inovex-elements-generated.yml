name: inovex/elements
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  qc:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Track master branch to make nx affected work
      run: |
        git branch --track main origin/master
    - name: Install dependencies
      uses: ./.github/workflows/dependencies-install
    - name: Store Playwright's Version
      run: |
        PLAYWRIGHT_VERSION=$(npx playwright -V | awk '{ print $2 }')

        echo "Playwright's Version: $PLAYWRIGHT_VERSION"

        echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
    - name: Cache Playwright Browsers for Playwright's Version
      id: cache-playwright-browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
    - name: Setup Playwright
      if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
      run: yarn playwright install --with-deps
    - name: Check format
      run: yarn format
    - name: Check lint
      run: yarn lint:ci
      env:
        NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    - name: Build all projects
      run: yarn build
      env:
        NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    - name: Check if there are changes
      uses: NathanielHill/fail-if-changes@v1.1.1
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test all projects (ces) (ces)
      id: test_projects
      run: yarn test
      env:
        NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    - name: Upload playwright trace
      if: ${{ failure() && steps.test_projects.conclusion == 'failure' }}
      uses: actions/upload-artifact@v3
      with:
        name: playwright-traces
        path: dist/.playwright/packages/storybook/test-output
    - name: Upload build artifacts for canary release
      uses: ./.github/workflows/artifacts-upload
      with:
        upload-core-artifacts: true
        upload-example-artifacts: ${{ github.ref == 'refs/heads/master' }}
        upload-storybook-artifact: true
  unicorn:
    needs: qc
    uses: ./.github/workflows/deploy-unicorn.yml
