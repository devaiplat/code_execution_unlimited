name: litestar-org/litestar
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    runs-on: ${{ inputs.os }}
    timeout-minutes: ${{ inputs.timeout }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    - uses: pdm-project/setup-pdm@v4
      name: Set up PDM
      with:
        python-version: ${{ inputs.python-version }}
        allow-python-prereleases: false
        cache: true
        cache-dependency-path: >
          ./pdm.lock
    - name: Install dependencies
      run: pdm install -G:all
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      if: ${{ !inputs.coverage }}
      run: pdm run pytest docs/examples tests -n auto
    - name: Test with coverage (ces)
      if: inputs.coverage
      run: pdm run pytest docs/examples tests -n auto --cov
    - name: Rename coverage file
      if: inputs.coverage
      run: mv .coverage .coverage.${{ inputs.python-version }}
    - uses: actions/upload-artifact@v3
      if: inputs.coverage
      with:
        name: coverage-data
        path: .coverage.${{ inputs.python-version }}
        include-hidden-files: true
