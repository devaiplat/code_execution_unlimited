name: projectdiscovery/nuclei
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    name: Test Builds
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Go
      uses: projectdiscovery/actions/setup/go@v1
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    - name: Verify Go modules
      run: make verify
    - name: Build
      run: go build .
      working-directory: cmd/nuclei/
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test (ces) (ces)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PDCP_API_KEY: ${{ secrets.PDCP_API_KEY }}
      run: go test ./...
    - name: Integration Tests (ces)
      timeout-minutes: 50
      env:
        GH_ACTION: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PDCP_API_KEY: ${{ secrets.PDCP_API_KEY }}
      run: |
        chmod +x run.sh

        bash run.sh ${{ matrix.os }}
      working-directory: integration_tests/
    - name: Race Condition Tests (ces)
      if: ${{ matrix.os != 'windows-latest' }}
      run: go run -race . -l ../functional-test/targets.txt -id tech-detect,tls-version
      working-directory: cmd/nuclei/
    - name: Example SDK Simple
      run: go run .
      working-directory: examples/simple/
    - name: Example SDK with speed control
      run: go run .
      working-directory: examples/with_speed_control/
