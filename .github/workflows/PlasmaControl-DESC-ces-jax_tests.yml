name: PlasmaControl/DESC
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  jax_tests:
    if: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jax-version:
        - 0.3.0
        - 0.3.1
        - 0.3.2
        - 0.3.3
        - 0.3.4
        - 0.3.5
        - 0.3.6
        - 0.3.7
        - 0.3.8
        - 0.3.9
        - 0.3.10
        - 0.3.11
        - 0.3.12
        - 0.3.13
        - 0.3.14
        - 0.3.15
        - 0.3.16
        - 0.3.17
        - 0.3.19
        - 0.3.20
        - 0.3.21
        - 0.3.22
        - 0.3.23
        - 0.3.24
        - 0.3.25
        - 0.4.1
        - 0.4.2
        - 0.4.3
        - 0.4.4
        - 0.4.5
        - 0.4.6
        - 0.4.7
        - 0.4.8
        - 0.4.9
        - 0.4.10
        - 0.4.11
        - 0.4.12
        - 0.4.13
        - 0.4.14
        - 0.4.16
        - 0.4.17
        - 0.4.18
        - 0.4.18
        - 0.4.19
        - 0.4.20
        - 0.4.21
        - 0.4.22
        - 0.4.23
        - 0.4.24
        - 0.4.25
        group:
        - 1
        - 2
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
        cache: pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

        pip install -r devtools/dev-requirements.txt

        pip install matplotlib==3.5.0
    - name: Remove jax
      run: |
        pip uninstall jax jaxlib -y
    - name: install jax
      run: |
        pip install "jax[cpu]==${{ matrix.jax-version }}"
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test with pytest (ces) (ces)
      run: |
        pwd

        lscpu

        python -m pytest -m unit \
          --durations=0 \
          --mpl \
          --maxfail=1 \
          --splits 3 \
          --group ${{ matrix.group }} \
          --splitting-algorithm least_duration
