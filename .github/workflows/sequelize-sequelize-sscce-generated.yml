name: sequelize/sequelize-sscce
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  test-sqlite:
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - 10
        - 18
        - 20
    name: sqlite (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    env:
      DIALECT: sqlite
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - run: /bin/bash ./dev/prepare-ci.sh
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Execute SSCCE
      run: yarn run _test
  test-postgres:
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - 10
        - 18
        - 20
        postgres-version:
        - oldest
        - latest
        minify-aliases:
        - true
        - false
        native:
        - true
        - false
    name: postgres ${{ matrix.postgres-version }}${{ matrix.native && ' (native)' || '' }} (Node ${{ matrix.node-version }})${{ matrix.minify-aliases && ' (minified aliases)' || '' }}
    runs-on: ubuntu-latest
    env:
      DIALECT: ${{ matrix.native && 'postgres-native' || 'postgres' }}
      SEQ_PG_MINIFY_ALIASES: ${{ matrix.minify-aliases && '1' || '' }}
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - run: /bin/bash ./dev/prepare-ci.sh
    - run: yarn start-postgres-${{ matrix.postgres-version }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Execute SSCCE
      run: yarn run _test
  test-oldest-latest:
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - 10
        - 18
        - 20
        database-version:
        - oldest
        - latest
        dialect:
        - mysql
        - mariadb
        - mssql
    name: ${{ matrix.dialect }} ${{ matrix.database-version }} (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    env:
      DIALECT: ${{ matrix.dialect }}
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
    - run: /bin/bash ./dev/prepare-ci.sh
    - run: yarn start-${{ matrix.dialect }}-${{ matrix.database-version }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Execute SSCCE
      run: yarn run _test
