name: ParabolInc/parabol
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  PARABOL_BUILD_ENV_PATH: docker/images/parabol-ubi/environments/pipeline
jobs:
  test:
    runs-on: ubuntu-8cores
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write
    services:
      postgres:
        image: pgvector/pgvector:0.7.0-pg16
        env:
          POSTGRES_PASSWORD: temppassword
          POSTGRES_USER: tempuser
          POSTGRES_DB: tempdb
        ports:
        - 5432:5432
      rethinkdb:
        image: rethinkdb:2.4.2
        ports:
        - 8080:8080
        - 28015:28015
        - 29015:29015
      redis:
        image: redis:7.0-alpine
        ports:
        - 6379:6379
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version-file: package.json
    - name: Setup environment variables
      run: |
        ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)

        echo ACTION_VERSION=$ACTION_VERSION >> $GITHUB_ENV

        echo ACTION_VERSION=$ACTION_VERSION


        NODE_VERSION=$(jq -r -j '.engines.node|ltrimstr("^")' package.json)

        echo NODE_VERSION=$NODE_VERSION >> $GITHUB_ENV

        echo NODE_VERSION=$NODE_VERSION


        PLAYWRIGHT_VERSION=$(yarn list @playwright/test | grep @playwright | sed 's/.*@//')

        echo PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION >> $GITHUB_ENV

        echo PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION
    - name: Get cached node modules
      id: cache
      uses: actions/cache@v3
      with:
        path: >
          **/node_modules
        key: node_modules-${{ runner.arch }}-${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}
    - name: Install node_modules
      if: steps.cache.outputs.cache-hit != 'true'
      run: yarn install --immutable
    - name: Build the DBs
      run: |
        cp ${{ env.PARABOL_BUILD_ENV_PATH }} ./.env

        yarn db:migrate

        yarn pg:migrate up

        yarn pg:build
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build for testing (ces) (ces)
      run: yarn build
    - name: Verify source is clean
      run: git diff --quiet HEAD || (echo "Changes in generated files detected"; git diff; exit 1)
    - name: Run Predeploy for Testing (ces)
      run: yarn predeploy
    - name: Start testing server in background (ces)
      uses: JarvusInnovations/background-action@v1
      with:
        run: |
          yarn start &
        wait-on: >
          http://localhost:3000/graphql
    - name: Kysely Codegen
      run: yarn pg:generate
    - name: Typecheck
      run: yarn typecheck
    - name: Run server tests (ces)
      run: yarn test:server -- --reporters=default --reporters=jest-junit
      env:
        JEST_JUNIT_OUTPUT_DIR: ./test-results/junit/server
    - name: Run client tests (ces)
      run: yarn test:client -- --reporters=default --reporters=jest-junit
      env:
        JEST_JUNIT_OUTPUT_DIR: ./test-results/junit/client
    - name: Cache Playwright Browsers
      id: cache-playwright-browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.arch }}-${{ env.PLAYWRIGHT_VERSION }}
    - name: Setup Playwright
      if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
    - name: Run Playwright Tests (ces)
      run: yarn workspace integration-tests test --reporter list,junit
      env:
        PLAYWRIGHT_JUNIT_OUTPUT_NAME: ./test-results/junit/junit.xml
    - name: Store Artifacts from Failed Tests (ces)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: packages/integration-tests/test-results/
        retention-days: 7
    - name: Report Status
      if: ${{ failure() && github.ref_name == 'master' }}
      uses: ravsamhq/notify-slack-action@v2
      with:
        status: ${{ job.status }}
        notify_when: failure
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GH_ACTIONS_NOTIFICATIONS }}
