name: open-zaak/open-zaak
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  IMAGE_NAME: openzaak/open-zaak
  DJANGO_SETTINGS_MODULE: openzaak.conf.ci
  DB_PASSWORD: ''
  DB_USER: postgres
  ALLOWED_HOSTS: openzaak.nl
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: Determine changed files
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Get changed PY files
      id: changed-py-files
      uses: tj-actions/changed-files@v8.5
      with:
        files: >
          ^src/.+\.py
    - name: Get changed JS files
      id: changed-js-files
      uses: tj-actions/changed-files@v8.5
      with:
        files: >
          ^src/.+\.js
    - name: Get changed requirements files
      id: changed-requirements
      uses: tj-actions/changed-files@v8.5
      with:
        files: ^requirements/.+\.txt$
    outputs:
      changed-py-files: ${{ steps.changed-py-files.outputs.any_changed }}
      changed-js-files: ${{ steps.changed-js-files.outputs.any_changed }}
      changed-requirements: ${{ steps.changed-requirements.outputs.any_changed }}
  cmis-init:
    runs-on: ubuntu-latest
    needs:
    - changed-files
    if: true
    name: Check 'install' with CMIS enabled
    services:
      postgres:
        image: postgis/postgis:12-2.5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: pip
        cache-dependency-path: requirements/*.txt
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install system packages
      run: |
        sudo apt-get update \

        && sudo apt-get install -y --no-install-recommends \
          libgdal-dev \
          gdal-bin
    - name: Install dependencies
      run: pip install -r requirements/ci.txt
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test migrate and check (ces) (ces)
      run: |
        createdb -U postgres -h localhost openzaak

        python src/manage.py check

        python src/manage.py migrate
      env:
        CMIS_ENABLED: True
        DB_NAME: openzaak
  tests:
    runs-on: ubuntu-latest
    needs:
    - changed-files
    if: true
    strategy:
      matrix:
        postgres:
        - 12
        - 13
        - 14
        postgis:
        - 2.5
        - 3.2
        binding:
        - BROWSER
        - WEBSERVICE
        cmisurlmapping:
        - False
        - True
        exclude:
        - postgres: 13
          postgis: 2.5
        - postgres: 14
          postgis: 2.5
        - binding: BROWSER
          cmisurlmapping: True
        - binding: WEBSERVICE
          postgres: 13
        - binding: WEBSERVICE
          postgres: 14
    name: Tests (PG ${{ matrix.postgres }}, postgis ${{ matrix.postgis }}, ${{ matrix.binding }} binding, CMIS URL mapping = ${{ matrix.cmisurlmapping }} )
    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres }}-${{ matrix.postgis }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: pip
        cache-dependency-path: requirements/*.txt
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install system packages
      run: |
        sudo apt-get update \

        && sudo apt-get install -y --no-install-recommends \
          libgdal-dev \
          gdal-bin
    - name: Bring up Alfresco
      run: |
        docker compose -f docker-compose.ci.cmis.yml up -d

        docker ps -q | xargs  docker stats --no-stream
    - name: Install dependencies
      run: pip install -r requirements/ci.txt
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build frontend
      run: |
        npm ci --legacy-peer-deps

        npm run build --production
    - name: Run tests (ces)
      if: ${{ !(matrix.cmisurlmapping == 'True' && matrix.binding == 'BROWSER') }}
      run: |
        python src/manage.py collectstatic --noinput --link

        coverage run src/manage.py test src
      env:
        CMIS_BINDING: ${{ matrix.binding }}
        CMIS_URL_MAPPING_ENABLED: ${{ matrix.cmisurlmapping }}
    - name: Publish coverage report
      uses: codecov/codecov-action@v3
  docs:
    runs-on: ubuntu-latest
    name: Documentation build
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: pip
        cache-dependency-path: requirements/*.txt
    - name: Install dependencies
      run: pip install -r requirements/dev.txt pytest
    - name: Install system packages
      run: |
        sudo apt-get update \

        && sudo apt-get install -y --no-install-recommends \
          libgdal-dev \
          gdal-bin
    - name: Generate environment variable documentation using OAf and check if it was updated
      run: |
        bin/generate_envvar_docs.sh

        changes=$(git diff docs/installation/config/env_config.rst)

        if [ ! -z "$changes" ]; then
            echo $changes
            echo "Please update the environment documentation by running \`bin/generate_envvar_docs.sh\`"
            cat docs/installation/config/env_config.rst
            exit 1
        fi
      env:
        DJANGO_SETTINGS_MODULE: openzaak.conf.ci
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build and test docs (ces) (ces)
      run: |
        export OPENSSL_CONF=$(pwd)/openssl.conf

        pytest check_sphinx.py -v --tb=auto
      working-directory: docs
  check_requirements:
    runs-on: ubuntu-latest
    name: Check requirements files
    if: true
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - id: files
      uses: tj-actions/changed-files@v8.5
      with:
        files: ^requirements/.+\.txt$
    - name: Check requirements
      run: bin/check_requirements.sh "${{ steps.files.outputs.modified_files }}"
  docker:
    runs-on: ubuntu-latest
    name: Docker image build
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Determine tag/commit hash
      id: vars
      run: |
        # Strip git ref prefix from version

        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')


        # Strip "v" prefix from tag name (if present at all)

        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')


        # Use Docker `latest` tag convention

        [ "$VERSION" == "main" ] && VERSION=latest


        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

        echo "git_hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT
    - name: Build the Docker image
      run: |
        docker build \
          --tag $IMAGE_NAME:${{ steps.vars.outputs.tag }} \
          --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
          --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
          .
    - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
    - name: Store image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: image.tar
        retention-days: 1
  image_scan:
    runs-on: ubuntu-latest
    name: Scan docker image
    needs:
    - docker
    steps:
    - name: Download built image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        input: /github/workspace/image.tar
        format: sarif
        output: trivy-results-docker.sarif
        ignore-unfixed: true
    - name: Upload results to GH Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results-docker.sarif
  publish:
    needs:
    - tests
    - docker
    name: Push Docker image
    runs-on: ubuntu-latest
    if: true
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Download built image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    - name: Determine tag/commit hash
      id: vars
      run: |
        # Strip git ref prefix from version

        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')


        # Strip "v" prefix from tag name (if present at all)

        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')


        # Use Docker `latest` tag convention

        [ "$VERSION" == "main" ] && VERSION=latest


        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
    - name: Load image
      run: |
        docker image load -i image.tar
    - name: Log into registry
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Push the Docker image
      run: docker push $IMAGE_NAME:${{ steps.vars.outputs.tag }}
