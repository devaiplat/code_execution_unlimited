name: Alqor-UG/sqooler
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  tests:
    name: tests-python${{ matrix.python-version }}-${{ matrix.os }}
    env:
      APP_KEY: ${{secrets.APP_KEY}}
      APP_SECRET: ${{secrets.APP_SECRET}}
      REFRESH_TOKEN: ${{secrets.REFRESH_TOKEN}}
      MONGODB_USERNAME: ${{secrets.MONGODB_USERNAME}}
      MONGODB_PASSWORD: ${{secrets.MONGODB_PASSWORD}}
      MONGODB_DATABASE_URL: ${{secrets.MONGODB_DATABASE_URL}}
      BASE_PATH: ${{secrets.BASE_PATH}}
      TEST_USERNAME: ${{secrets.TEST_USERNAME}}
      PRIVATE_JWK_STR: ${{secrets.PRIVATE_JWK_STR}}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version:
        - 3.10
        - 3.12
        os:
        - ubuntu-latest
        - macOS-latest
        - windows-latest
    steps:
    - name: Print Concurrency Group
      env:
        CONCURRENCY_GROUP: ${{ github.repository }}-${{ github.ref }}-${{ github.head_ref }}
      run: |
        echo -e "\033[31;1;4mConcurrency Group\033[0m"

        echo -e "$CONCURRENCY_GROUP\n"
      shell: bash
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        pipx install poetry

        poetry install
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Tests (ces) (ces)
      run: |
        poetry run pytest --cov-report term-missing --cov=src tests
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: 3.10
    - name: Install Dependencies
      run: |
        pipx install poetry

        poetry install  
    - name: Run pylint
      run: |
        poetry run pylint src

        poetry run pylint tests
    - name: Run black
      run: |
        poetry run black --check src
    - name: Run mypy
      run: |
        poetry run mypy src

        poetry run mypy tests
