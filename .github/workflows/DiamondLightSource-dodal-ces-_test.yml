on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  PY_IGNORE_IMPORTMISMATCH: 1
jobs:
  run:
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - if: inputs.python-version == 'dev'
      name: Install dev versions of python packages
      uses: ./.github/actions/install_requirements
    - if: inputs.python-version == 'dev'
      name: Write the requirements as an artifact
      run: pip freeze --exclude-editable > /tmp/dev-requirements.txt
    - if: inputs.python-version == 'dev'
      name: Upload dev-requirements.txt
      uses: actions/upload-artifact@v4
      with:
        name: dev-requirements
        path: /tmp/dev-requirements.txt
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - if: inputs.python-version != 'dev'
      name: Install latest versions of python packages (ces) (ces)
      uses: ./.github/actions/install_requirements
      with:
        python-version: ${{ inputs.python-version }}
        pip-install: .[dev]
    - name: Run tests (ces)
      run: tox -e tests
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        name: ${{ inputs.python-version }}/${{ inputs.runs-on }}
        files: cov.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
name: DiamondLightSource/dodal
