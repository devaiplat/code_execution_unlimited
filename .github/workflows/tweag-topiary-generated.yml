on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.1.0
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Set up Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: tweag-topiary
        authToken: ${{ secrets.CACHIX_TWEAG_TOPIARY_AUTH_TOKEN }}
    - name: Set up frontend cache
      uses: actions/cache@v4
      with:
        path: >
          **/node_modules

          ~/.cache/puppeteer
        key: frontend_${{ matrix.os }}_${{ hashFiles('**/package-lock.json') }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Clippy, test, and benchmark (ces) (ces)
      if: matrix.os == 'ubuntu-latest'
      run: export GC_DONT_GC=1; nix -L flake check
    - name: Build and test executable (ces)
      run: 'echo \{ \"foo\": \"bar\" \} | nix run . -- fmt -l json'
    - name: Build the topiary-cli and test those tests that cannot be performed in Nix (ces)
      run: nix develop --command bash -c "cargo test -p topiary-cli"
    - name: Build client-app example
      run: nix build .#client-app
    - name: Verify that usage in README.md matches CLI output
      run: nix run .#verify-documented-usage
    - name: Build web playground Wasm app
      if: success() && matrix.os == 'ubuntu-latest'
      run: nix build .#topiary-playground
    - name: Copy web playground Wasm app into playground frontend
      if: success() && matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p web-playground/src/wasm-app

        cp -r result/* web-playground/src/wasm-app/
    - name: Move sample input and queries into playground frontend
      if: success() && matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p web-playground/src/samples

        mv web-playground/src/wasm-app/languages_export.ts web-playground/src/samples/
    - name: Install web playground frontend dependencies
      if: success() && matrix.os == 'ubuntu-latest'
      run: npm install --prefix web-playground
    - name: Start web playground frontend
      if: success() && matrix.os == 'ubuntu-latest'
      run: |
        npm run dev --prefix web-playground &

        # Loop until there's a response

        while [[ "$(curl --silent --output /dev/null --write-out "%{http_code}" http://localhost:5173/playground)" != "200" ]]; do
          sleep 2
        done
    - name: Test web playground frontend (ces)
      if: success() && matrix.os == 'ubuntu-latest'
      run: npm run e2e --prefix web-playground
    - name: Make web playground frontend release build
      if: success() && matrix.os == 'ubuntu-latest'
      run: npm run build --prefix web-playground
    - name: Copy playground into website
      if: success() && matrix.os == 'ubuntu-latest'
      run: |
        rm -rf website/playground

        cp -r web-playground/dist website/playground
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v1.0.7
      if: success() && matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
      with:
        path: website
  deploy:
    needs: build
    if: true
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
name: tweag/topiary
