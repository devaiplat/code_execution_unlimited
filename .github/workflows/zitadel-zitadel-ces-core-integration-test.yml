name: zitadel/zitadel
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  postgres:
    runs-on:
      group: zitadel-public
    services:
      postgres:
        image: postgres
        ports:
        - 5432:5432
        env:
          POSTGRES_USER: zitadel
          PGUSER: zitadel
          POSTGRES_DB: zitadel
          POSTGRES_HOST_AUTH_METHOD: trust
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5 --health-start-period 10s
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
    - uses: actions/cache/restore@v4
      timeout-minutes: 1
      name: restore core
      id: restore-core
      with:
        path: ${{ inputs.core_cache_path }}
        key: ${{ inputs.core_cache_key }}
        fail-on-cache-miss: true
    - id: go-cache-path
      name: set cache path
      run: echo "GO_CACHE_PATH=$(go env GOCACHE)" >> $GITHUB_OUTPUT
    - uses: actions/cache/restore@v4
      id: cache
      timeout-minutes: 1
      continue-on-error: true
      name: restore previous results
      with:
        key: integration-test-postgres-${{ inputs.core_cache_key }}
        restore-keys: >
          integration-test-postgres-core-
        path: ${{ steps.go-cache-path.outputs.GO_CACHE_PATH }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: test (ces) (ces)
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      env:
        ZITADEL_MASTERKEY: MasterkeyNeedsToHave32Characters
        INTEGRATION_DB_FLAVOR: postgres
      run: make core_integration_test
    - name: upload server logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-server-logs
        path: >
          tmp/zitadel.log

          tmp/race.log.*
    - name: publish coverage
      uses: codecov/codecov-action@v4.3.0
      with:
        file: profile.cov
        name: core-integration-tests-postgres
        flags: core-integration-tests-postgres
        token: ${{ secrets.CODECOV_TOKEN }}
    - uses: actions/cache/save@v4
      name: cache results
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      with:
        key: integration-test-postgres-${{ inputs.core_cache_key }}
        path: ${{ steps.go-cache-path.outputs.GO_CACHE_PATH }}
