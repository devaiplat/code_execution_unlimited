name: encointer/encointer-wallet-flutter
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  ARTIFACT_PATH: ./screenshots
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  android-device-tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 70
    strategy:
      matrix:
        api-level:
        - 33
        include:
        - os: macos-12
          device: pixel_3a
          record_video: false
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: temurin
    - name: Install flutter wrapper
      run: ./scripts/install_flutter_wrapper.sh
    - name: Setup Android SDK and accept licences
      uses: android-actions/setup-android@v3
    - name: List android images
      run: sdkmanager --list | grep system-images
    - name: Get dependencies (i.e., melos)
      run: .flutter/bin/dart pub get
    - name: Melos Bootstrap
      run: .flutter/bin/dart run melos bootstrap
    - name: Gradle cache
      uses: actions/cache@v4
      with:
        path: >
          ~/.gradle/caches

          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: >
          ~/.android/avd/*

          ~/.android/adb*
        key: avd-${{ matrix.api-level }}-${{ matrix.device }}
    - name: Start colima a docker runtime for MacOs
      run: |
        brew install docker

        colima start
    - name: Run encointer-node
      run: ./scripts/docker_run_encointer_node_notee.sh &
    - name: Bootstrap Demo Community
      run: ./scripts/docker_run_encointer_client_bootstrap_demo_community.sh
    - name: Create AVD and generate a clean snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        profile: ${{ matrix.device }}
        force-avd-creation: false
        arch: x86_64
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Android Integration Tests (ces) (ces)
      uses: reactivecircus/android-emulator-runner@v2
      env:
        ANDROID_DEBUG: true
        RECORD: ${{ matrix.record_video }}
        TEMP_DIR: ${{ env.ARTIFACT_PATH }}
      with:
        api-level: ${{ matrix.api-level }}
        profile: ${{ matrix.device }}
        force-avd-creation: false
        arch: x86_64
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./scripts/android_integration_test.sh
    - name: Upload screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.device }}
        path: ${{ env.ARTIFACT_PATH }}
