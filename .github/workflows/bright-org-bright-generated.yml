name: bright-org/bright
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    name: Build & Test & FormatCheck & Credo
    runs-on: ubuntu-latest
    container:
      image: hexpm/elixir:1.16.2-erlang-26.2.4-debian-bullseye-20240423-slim
      env:
        MIX_ENV: test
        GCS_BASE_URL: http://gcs:4443
    services:
      postgres:
        image: postgres:15.3-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      gcs:
        image: ghcr.io/s12m/fake-gcs-server:1.45.2
        ports:
        - 4443:4443
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Cache deps and _build
      uses: actions/cache@v3
      with:
        path: >
          deps

          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: >
          ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
    - name: Dependencies install
      run: |
        apt-get update -y && apt-get install -y build-essential inotify-tools git
    - name: Install Dependencies
      run: |
        mix local.rebar --force

        mix local.hex --force

        mix deps.get
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Test (ces) (ces)
      run: |
        mix deps.compile

        # phoenix_ecto: exclude_ecto_exceptions_from_plug 反映のためコンパイル明示

        mix deps.compile phoenix_ecto --force

        mix compile --warnings-as-errors

        mix test --warnings-as-errors
      env:
        DB_HOST: postgres
        DB_PORT: ${{ job.services.postgres.ports[5432] }}
    - name: Format Checks
      run: |
        mix format --check-formatted
    - name: Credo Checks
      run: |
        mix credo
