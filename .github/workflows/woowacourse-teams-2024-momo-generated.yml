name: woowacourse-teams/2024-momo
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  checks: write
  pull-requests: write
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: >
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
        list-files: csv
  fe-test:
    needs: detect-changes
    if: true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./frontend
    steps:
    - name: 모모 레파지토리의 코드를 가져와요 :)
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: 노드 버젼을 설정해요 :)
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: 이전 의존성을 저장해둔게 있나~? 확인해요 :)
      id: cache
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: >
          ${{ runner.os }}-node-

          ${{ runner.os }}
    - name: package-lock.json을 활용해서 의존성을 깨끗하게 설치해요 :)
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: RTL을 실행해요 :)
      run: npm run test -- --passWithNoTests
    - name: 테스트 결과를 PR에 코멘트로 등록해요 :)
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: frontend/reports/**/*.xml
