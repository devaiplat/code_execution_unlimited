name: pypa/setuptools
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}- ${{ github.ref_type }}- ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
permissions:
  contents: read
env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: true
  PIP_NO_PYTHON_VERSION_WARNING: true
  PIP_NO_WARN_SCRIPT_LOCATION: true
  TOX_OVERRIDE: testenv.pass_env+=GITHUB_*,FORCE_COLOR
jobs:
  test:
    strategy:
      matrix:
        python:
        - 3.8
        - 3.12
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        include:
        - python: 3.9
          platform: ubuntu-latest
        - python: 3.10
          platform: ubuntu-latest
        - python: 3.11
          platform: ubuntu-latest
        - python: pypy3.10
          platform: ubuntu-latest
          distutils: stdlib
        - platform: ubuntu-latest
          python: 3.10
          distutils: stdlib
        - python: 3.8
          platform: macos-13
        exclude:
        - python: 3.8
          platform: macos-latest
    runs-on: ${{ matrix.platform }}
    continue-on-error: ${{ matrix.python == '3.13' }}
    env:
      SETUPTOOLS_USE_DISTUTILS: ${{ matrix.distutils || 'local' }}
    timeout-minutes: 75
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python
      id: python-install
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        allow-prereleases: true
    - uses: actions/cache@v4
      id: cache
      with:
        path: setuptools/tests/config/downloads/*.cfg
        key: ${{ hashFiles('setuptools/tests/config/setupcfg_examples.txt') }}- ${{ hashFiles('setuptools/tests/config/downloads/*.py') }}
    - name: Populate download cache
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: setuptools/tests/config
      run: python -m downloads.preload setupcfg_examples.txt
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Pre-build distributions for test (ces) (ces)
      shell: bash
      run: |
        rm -rf dist

        # workaround for pypa/setuptools#4333

        pipx run --pip-args 'pyproject-hooks!=1.1' build

        echo "PRE_BUILT_SETUPTOOLS_SDIST=$(ls dist/*.tar.gz)" >> $GITHUB_ENV

        echo "PRE_BUILT_SETUPTOOLS_WHEEL=$(ls dist/*.whl)" >> $GITHUB_ENV

        rm -rf setuptools.egg-info  # Avoid interfering with the other tests
    - name: Workaround for unreleased PyNaCl (pyca/pynacl#805)
      if: contains(matrix.python, 'pypy')
      run: echo "SETUPTOOLS_ENFORCE_DEPRECATION=0" >> $GITHUB_ENV
    - name: Install tox
      run: python -m pip install tox
    - name: Run
      run: tox
    - name: Create coverage report
      if: hashFiles('.coverage') != ''
      run: pipx run coverage xml --ignore-errors
    - name: Publish coverage
      if: hashFiles('coverage.xml') != ''
      uses: codecov/codecov-action@v4
      with:
        flags: CI-GHA, ${{ github.job }}, OS-${{ runner.os }}, VM-${{ matrix.platform }}, Py-${{ steps.python-install.outputs.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
  collateral:
    strategy:
      fail-fast: false
      matrix:
        job:
        - diffcov
        - docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Install tox
      run: python -m pip install tox
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Eval ${{ matrix.job }}
      run: tox -e ${{ matrix.job }}
  check:
    if: true
    needs:
    - integration-test
    - test
    - collateral
    - test_cygwin
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        allowed-skips: integration-test
        jobs: ${{ toJSON(needs) }}
  test_cygwin:
    strategy:
      matrix:
        python:
        - 39
        platform:
        - windows-latest
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 75
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Cygwin with Python
      uses: cygwin/cygwin-install-action@v4
      with:
        platform: x86_64
        packages: python${{ matrix.python }}, python${{ matrix.python }}-devel, python${{ matrix.python }}-tox, gcc-core, git,
    - name: Record the currently selected Python version
      id: python-install
      run: |
        python -c 'import platform; print("python-version=" + platform.python_version())' >> ${GITHUB_OUTPUT}
      shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
      run: |
        git config --global --add safe.directory "$(cygpath -u "$GITHUB_WORKSPACE")" # workaround for #3408

        tox
    - name: Create coverage report
      if: hashFiles('.coverage') != ''
      run: |
        python -m pip install coverage

        python -m coverage xml --ignore-errors
      shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
    - name: Publish coverage
      if: hashFiles('coverage.xml') != ''
      uses: codecov/codecov-action@v4
      with:
        flags: CI-GHA, ${{ github.job }}, OS-${{ runner.os }}, VM-${{ matrix.platform }}, Py-${{ steps.python-install.outputs.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
  integration-test:
    needs: test
    if: true
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install OS-level dependencies
      run: |
        sudo apt-get update

        sudo apt-get install build-essential gfortran libopenblas-dev libyaml-dev
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10
    - name: Install tox
      run: |
        python -m pip install tox
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run integration tests (ces) (ces)
      run: tox -e integration
  release:
    permissions:
      contents: write
    needs:
    - check
    if: true
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Install tox
      run: python -m pip install tox
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run
      run: tox -e release
      env:
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
