name: provenance-io/provenance
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true
jobs:
  setup-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: technote-space/get-diff-action@v6.1.2
      with:
        PATTERNS: >
          **/**.go

          go.mod

          go.sum

          .github/workflows/test.yml
    - name: Define Variables
      id: def-vars
      run: |
        file_prefix="${GITHUB_SHA:0:7}-${GITHUB_RUN_ATTEMPT}"

        echo "Setting output: file-prefix=$file_prefix"

        echo "file-prefix=$file_prefix" >> "$GITHUB_OUTPUT"
    - name: Create a file with all the pkgs
      run: go list ./... > pkgs.txt
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt
        path: ./pkgs.txt
    - name: Split pkgs into parts
      run: |
        grep -vF \
          -e 'github.com/provenance-io/provenance/x/quarantine/simulation' \
          -e 'github.com/provenance-io/provenance/x/sanction/simulation' \
          pkgs.txt > pkgs.txt.tmp
        split -d -n l/3 pkgs.txt.tmp pkgs.txt.part.

        printf '%s\n' \
          'github.com/provenance-io/provenance/x/quarantine/simulation' \
          >> pkgs.txt.part.03
        printf '%s\n' \
          'github.com/provenance-io/provenance/x/sanction/simulation' \
          >> pkgs.txt.part.04
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt.part.00
        path: ./pkgs.txt.part.00
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt.part.01
        path: ./pkgs.txt.part.01
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt.part.02
        path: ./pkgs.txt.part.02
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt.part.03
        path: ./pkgs.txt.part.03
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.def-vars.outputs.file-prefix }}-pkgs.txt.part.04
        path: ./pkgs.txt.part.04
    outputs:
      should-run: ${{ env.GIT_DIFF }}
      file-prefix: ${{ steps.def-vars.outputs.file-prefix }}
  tests:
    needs: setup-tests
    strategy:
      fail-fast: false
      matrix:
        part:
        - 00
        - 01
        - 02
        - 03
        - 04
    runs-on: ubuntu-latest
    env:
      LD_LIBRARY_PATH: /usr/local/lib:/usr/local/lib/x86_64-linux-gnu
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      if: needs.setup-tests.outputs.should-run
      with:
        go-version-file: go.mod
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-pkgs.txt.part.${{ matrix.part }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: test & coverage report creation (ces) (ces)
      if: needs.setup-tests.outputs.should-run
      run: |
        cat pkgs.txt.part.${{ matrix.part }} | xargs go test -mod=readonly -timeout 30m -coverprofile=${{ matrix.part }}profile.out -covermode=atomic -tags='norace ledger test_ledger_mock'
    - uses: actions/upload-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}-coverage
        path: ./${{ matrix.part }}profile.out
  upload-coverage-report:
    needs:
    - setup-tests
    - tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-00-coverage
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-01-coverage
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-02-coverage
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-03-coverage
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-04-coverage
    - name: Combine profiles
      if: needs.setup-tests.outputs.should-run
      run: |
        cat ./*profile.out | grep -v "mode: atomic" >> coverage.txt
    - name: filter out DONTCOVER
      if: needs.setup-tests.outputs.should-run
      run: |
        excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"

        excludelist+=" $(find ./ -type f -name '*.pb.go')"

        excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"

        excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"

        for filename in ${excludelist}; do
          filename=$(echo $filename | sed 's/^./github.com\/cosmos\/cosmos-sdk/g')
          echo "Excluding ${filename} from coverage report..."
          sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
        done
    - uses: codecov/codecov-action@v4
      if: needs.setup-tests.outputs.should-run
      with:
        file: ./coverage.txt
  test-race:
    needs: setup-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        part:
        - 00
        - 01
        - 02
        - 03
        - 04
    env:
      LD_LIBRARY_PATH: /usr/local/lib:/usr/local/lib/x86_64-linux-gnu
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      if: needs.setup-tests.outputs.should-run
      with:
        go-version-file: go.mod
    - uses: actions/download-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-pkgs.txt.part.${{ matrix.part }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: test & coverage report creation (ces) (ces)
      if: needs.setup-tests.outputs.should-run
      run: |
        xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -timeout 30m -race -tags='cgo ledger test_ledger_mock' | tee ${{ matrix.part }}-race-output.txt

        exit "${PIPESTATUS[0]}"
    - uses: actions/upload-artifact@v4
      if: needs.setup-tests.outputs.should-run
      with:
        name: ${{ needs.setup-tests.outputs.file-prefix }}-${{ matrix.part }}-race-output
        path: ./${{ matrix.part }}-race-output.txt
