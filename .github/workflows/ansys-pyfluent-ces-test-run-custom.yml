name: ansys/pyfluent
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
env:
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  PYFLUENT_TIMEOUT_FORCE_EXIT: 30
  PYFLUENT_LAUNCH_CONTAINER: 1
  PYFLUENT_LOGGING: DEBUG
  PYFLUENT_WATCHDOG_DEBUG: OFF
  PYFLUENT_HIDE_LOG_SECRETS: 1
jobs:
  build_test:
    name: Build and Test
    runs-on:
    - self-hosted
    - pyfluent
    strategy:
      fail-fast: false
      matrix:
        include:
        - image-tag: v22.2.0
          version: 222
        - image-tag: v23.1.0
          version: 231
        - image-tag: v23.2.0
          version: 232
        - image-tag: v24.1.0
          version: 241
        - image-tag: v24.2.0
          version: 242
        - image-tag: v25.1.0
          version: 251
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: >
          Python-${{ runner.os }}-${{ matrix.python-version }}
    - name: Add version information
      run: make version-info
    - name: Install pyfluent
      run: make install
    - name: Retrieve PyFluent version
      run: |
        echo "PYFLUENT_VERSION=$(python -c "from ansys.fluent.core import __version__; print(); print(__version__)" | tail -1)" >> $GITHUB_OUTPUT

        echo "PYFLUENT version is: $(python -c "from ansys.fluent.core import __version__; print(); print(__version__)" | tail -1)"
      id: version
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ansys-bot
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull Fluent docker image
      if: matrix.image-tag != 'v25.1.0'
      run: make docker-pull
      env:
        FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}
    - name: Pull Fluent docker image dev
      if: matrix.image-tag == 'v25.1.0'
      run: make docker-pull
      env:
        FLUENT_IMAGE_TAG: ${{ vars.FLUENT_STABLE_IMAGE_DEV }}
    - name: Run API codegen
      run: make api-codegen
      env:
        FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}
    - name: Print Fluent version info
      run: |
        cat src/ansys/fluent/core/generated/fluent_version_${{ matrix.version }}.py
    - name: Install again after codegen
      run: |
        rm -rf dist

        make install > /dev/null
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Unit Testing (ces) (ces)
      run: |
        echo "Running custom unittest"

        sudo rm -rf /home/ansys/Documents/ansys_fluent_core_examples/*

        make install-test

        poetry python -m pytest -v --no-cov --capture=no -k test_parametric_workflow --nightly
      env:
        FLUENT_IMAGE_TAG: ${{ matrix.image-tag }}
    - name: Cleanup previous docker containers
      if: always()
      run: make cleanup-previous-docker-containers
