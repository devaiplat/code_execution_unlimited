name: zwave-js/node-zwave-js
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: test-and-release-${{ github.ref }}
  cancel-in-progress: true
env:
  TURBO_API: http://127.0.0.1:9080
  TURBO_TOKEN: foo
  TURBO_TEAM: me
  TURBO_FLAGS: ''
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Compile TypeScript code
      run: yarn build $TURBO_FLAGS
    - name: Save Turbo Cache between jobs
      uses: ./.github/actions/build-cache-upload
  test-packages:
    needs:
    - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Restore Turbo Cache from previous jobs
      uses: ./.github/actions/build-cache-download
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Compile TypeScript code
      run: yarn build $TURBO_FLAGS
    - name: Import main entry points for each package
      run: |
        TMP_DIR=$(mktemp -d)


        echo "Re-creating a production environment..."

        yarn monopack --target "$TMP_DIR/.tarballs" --no-version

        cd $TMP_DIR


        npm init -y

        npm i .tarballs/zwave-js.tgz


        echo "Testing entry points..."

        # Now all entrypoints should work

        node -e 'require("zwave-js")'

        node -e 'require("@zwave-js/cc")'

        node -e 'require("@zwave-js/config")'

        node -e 'require("@zwave-js/core")'

        node -e 'require("@zwave-js/host")'

        node -e 'require("@zwave-js/nvmedit")'

        node -e 'require("@zwave-js/serial")'

        node -e 'require("@zwave-js/shared")'

        node -e 'require("@zwave-js/testing")'

        node -e 'require("zwave-js/safe")'

        node -e 'require("@zwave-js/cc/safe")'

        node -e 'require("@zwave-js/config/safe")'

        node -e 'require("@zwave-js/core/safe")'

        node -e 'require("@zwave-js/host/safe")'

        node -e 'require("@zwave-js/nvmedit/safe")'

        node -e 'require("@zwave-js/serial/safe")'

        node -e 'require("@zwave-js/shared/safe")'
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Run linters
      run: yarn run lint $TURBO_FLAGS
    - name: Prepare lint auto-fix patch
      if: >
        failure() &&

        github.event_name == 'pull_request'
      id: lint
      run: |
        # Run all lint commands and abort if one has unfixable errors

        yarn run lint:ts:fix $TURBO_FLAGS

        yarn fmt $TURBO_FLAGS


        git diff --name-only || true

        if ! git diff --quiet ; then
          echo "has changes"
          git diff > fix.patch
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    - name: Upload Patch
      if: >
        failure() &&

        github.event_name == 'pull_request' &&

        steps.lint.outputs.changed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: lint-fix
        path: fix.patch
  lint-zwave:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Lint config files and Z-Wave specifics
      run: yarn run lint:zwave $TURBO_FLAGS --log-prefix=none
  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version:
        - 18
        - 20
        os:
        - ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Run component tests (changes) (ces)
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

        yarn run test:dirty --resolve --base origin/${{ github.event.pull_request.base.ref }}
    - name: Run component tests (full) (ces)
      if: github.event_name != 'pull_request'
      run: yarn run test:ts $TURBO_FLAGS
  gh-cc-table:
    name: Update CC implementation status
    if: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Update CC table
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.BOT_TOKEN}}
        result-encoding: string
        script: >
          const main = require(`${process.env.GITHUB_WORKSPACE}/.github/action-scripts/updateCCImplementationOverview.js`);

          return main({github, context});
  generate-overview:
    name: Update toLogEntry overview
    if: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Update overview
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.BOT_TOKEN}}
        result-encoding: string
        script: >
          const main = require(`${process.env.GITHUB_WORKSPACE}/.github/action-scripts/updateToLogEntryOverview.js`);

          return main({github, context});
  deploy:
    if: true
    needs:
    - build
    - lint
    - lint-zwave
    - unit-tests
    - test-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
        - 18
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Restore Turbo Cache from previous jobs
      uses: ./.github/actions/build-cache-download
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prepare testing environment (ces) (ces)
      uses: ./.github/actions/prepare-env
      with:
        node-version: ${{ matrix.node-version }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Compile TypeScript code
      run: yarn build $TURBO_FLAGS
    - name: Extract the version and commit body from the tag
      id: extract_release
      run: |
        VERSION="${{ github.ref }}"

        VERSION=${VERSION##*/v}

        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

        EOF=$(od -An -N6 -x /dev/urandom | tr -d ' ')

        BODY=$(git show -s --format=%b)

        echo "BODY<<$EOF" >> $GITHUB_OUTPUT

        echo "$BODY" >> $GITHUB_OUTPUT

        echo "$EOF" >> $GITHUB_OUTPUT

        if [[ $VERSION == *"-"* ]] ; then
          echo "TAG=--tag next" >> $GITHUB_OUTPUT
        fi
    - name: Publish packages to npm
      env:
        TAG: ${{ steps.extract_release.outputs.TAG }}
      run: |
        yarn config set npmAuthToken "${{ secrets.NPM_TOKEN }}"

        yarn npm whoami

        yarn workspaces foreach --all -vti --no-private npm publish --tolerate-republish $TAG
    - name: Create Github Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}
