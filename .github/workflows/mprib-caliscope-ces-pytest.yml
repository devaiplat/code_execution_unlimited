name: mprib/caliscope
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    runs-on: ${{ matrix.os }}
    if: true
    strategy:
      fail-fast: true
      matrix:
        python-version:
        - 3.10
        - 3.11
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update packages (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update
    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get install --fix-missing libgl1-mesa-dev
    - name: Set environment variables (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "MKL_NUM_THREADS=1" >> $GITHUB_ENV

        echo "NUMEXPR_NUM_THREADS=1" >> $GITHUB_ENV

        echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

        python -m pip install ruff pytest

        pip install -e .
    - name: Lint with Ruff
      run: ruff check .
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test with pytest (ces) (ces)
      run: pytest
