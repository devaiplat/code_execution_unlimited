name: sourcegraph/jetbrains
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    name: JetBrains tests
    runs-on: ubuntu-latest
    steps:
    - name: Fetch Sources
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - run: yarn global add pnpm@8.6.7
    - run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      shell: bash
      id: pnpm-cache
    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-${{ matrix.node }}-pnpm-store-
        restore-keys: ${{ runner.os }}-${{ matrix.node }}-pnpm-store-k
    - name: Cache gradle and sourcegraph stores
      uses: actions/cache@v4
      with:
        path: >
          ~/.gradle/caches

          ~/.gradle/wrapper

          ~/.sourcegraph/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties') }}
        restore-keys: >
          ${{ runner.os }}-gradle-
    - name: Gradle Wrapper Validation
      uses: gradle/actions/wrapper-validation@v3
    - uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17
        cache: gradle
    - run: echo "SKIP_CODE_SEARCH_BUILD=true" >> $GITHUB_ENV
    - run: ./gradlew spotlessCheck
    - run: ./gradlew check
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Upload the test report (ces) (ces)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: build/reports/tests/
        compression-level: 9
    - run: ./gradlew buildPlugin
    - run: ./gradlew --stop
    - name: Upload the plugin package
      uses: actions/upload-artifact@v4
      with:
        name: plugin
        path: ./build/distributions/Sourcegraph-*.zip
        compression-level: 0
        retention-days: 7
  plugin-verifier:
    name: IntelliJ Plugin Verifier
    runs-on: ubuntu-latest
    needs:
    - test
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: plugin
    - name: Verify Plugin on IntelliJ Platforms
      id: verify
      uses: ChrisCarini/intellij-platform-plugin-verifier-action@v2.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        plugin-location: '*.zip'
        ide-versions: >
          ideaIC:2023.2

          ideaIC:2024.2
        failure-levels: >
          COMPATIBILITY_WARNINGS

          OVERRIDE_ONLY_API_USAGES

          NON_EXTENDABLE_API_USAGES

          PLUGIN_STRUCTURE_WARNINGS

          MISSING_DEPENDENCIES

          INVALID_PLUGIN
    - name: Upload the verification reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: plugin-verifier-reports
        path: verification-*
        compression-level: 9
