name: opensource-observer/oso
env:
  DOCKER_PLATFORM: amd64
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_TOOLS_GITHUB_APP_PRIVATE_KEY: ${{ secrets.PR_TOOLS_GITHUB_APP_PRIVATE_KEY }}
  PR_TOOLS_GITHUB_APP_ID: ${{ secrets.PR_TOOLS_GITHUB_APP_ID }}
  PR_TOOLS_ADMIN_TEAM_NAME: ${{ secrets.PR_TOOLS_ADMIN_TEAM_NAME }}
  DUNE_API_KEY: none
  PR_TOOLS_REPO: ${{ github.repository }}
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  test-deploy:
    name: Test Deployment Initializer
    if: true
    environment: external-prs-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup external pr tools
      uses: ./.github/workflows/setup-external-pr-tools
    - name: Initialize check
      run: |
        cd ops/external-prs &&

        pnpm tools initialize-check ${{ github.event.pull_request.head.sha }} ${{ github.event.pull_request.user.login }} test-deploy
    - name: Check if the user is an admin
      id: prs_permissions
      run: |
        cd ops/external-prs &&

        pnpm tools common is-repo-admin ${{ github.event.pull_request.user.login }} --output-file $GITHUB_OUTPUT
    - name: Auto-approve PR if conditions are met
      run: |
        cd ops/external-prs &&

        pnpm tools common attempt-auto-approve ${{ github.event.pull_request.number }} 
    - name: Login to google
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_BQ_ADMIN_CREDENTIALS_JSON }}
        create_credentials_file: true
      if: ${{ steps.prs_permissions.outputs.is_admin == '1' }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run test-deploy (ces) (ces)
      uses: ./.github/workflows/test-deploy
      with:
        sha: ${{ github.event.pull_request.head.sha }}
        pr: ${{ github.event.pull_request.number }}
        requester: ${{ github.event.sender.login }}
        author: ${{ github.event.sender.login }}
        gcp_service_account_path: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        google_project_id: ${{ vars.GOOGLE_PROJECT_ID }}
      if: ${{ steps.prs_permissions.outputs.is_admin == '1' }}
