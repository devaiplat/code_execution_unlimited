name: grpc/grpc-java
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  contents: read
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jre:
        - 8
        - 11
        - 17
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.jre }}
        distribution: temurin
    - name: Gradle cache
      uses: actions/cache@v3
      with:
        path: >
          ~/.gradle/caches

          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: >
          ${{ runner.os }}-gradle-
    - name: Maven cache
      uses: actions/cache@v3
      with:
        path: >
          ~/.m2/repository

          !~/.m2/repository/io/grpc
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', 'build.gradle') }}
        restore-keys: >
          ${{ runner.os }}-maven-
    - name: Protobuf cache
      uses: actions/cache@v3
      with:
        path: /tmp/protobuf-cache
        key: ${{ runner.os }}-maven-${{ hashFiles('buildscripts/make_dependencies.sh') }}
    - name: Build
      run: buildscripts/kokoro/unix.sh
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Post Failure Upload Test Reports to Artifacts (ces) (ces)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: Test Reports (JRE ${{ matrix.jre }})
        path: >
          ./*/build/reports/tests/**

          ./*/*/build/reports/tests/**
        retention-days: 14
    - name: Check for modified codegen
      run: test -z "$(git status --porcelain)" || (git status && echo Error Working directory is not clean. Forget to commit generated files? && false)
    - name: Coveralls
      if: matrix.jre == 8
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: ./gradlew :grpc-all:coveralls -PskipAndroid=true -x compileJava
    - name: Codecov
      uses: codecov/codecov-action@v3
  bazel:
    runs-on: ubuntu-latest
    env:
      USE_BAZEL_VERSION: 6.0.0
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Check versions match in MODULE.bazel and repositories.bzl
      run: |
        diff -u <(sed -n '/GRPC_DEPS_START/,/GRPC_DEPS_END/ {/GRPC_DEPS_/! p}' MODULE.bazel) \
                <(sed -n '/GRPC_DEPS_START/,/GRPC_DEPS_END/ {/GRPC_DEPS_/! p}' repositories.bzl)
    - name: Bazel cache
      uses: actions/cache@v3
      with:
        path: >
          ~/.cache/bazel/*/cache

          ~/.cache/bazelisk/downloads
        key: ${{ runner.os }}-bazel-${{ env.USE_BAZEL_VERSION }}-${{ hashFiles('WORKSPACE', 'repositories.bzl') }}
    - name: Run bazel build
      run: bazelisk build //... --enable_bzlmod=false
    - name: Run example bazel build
      run: bazelisk build //... --enable_bzlmod=false
      working-directory: ./examples
    - name: Run bazel build (bzlmod)
      env:
        USE_BAZEL_VERSION: 7.0.0
      run: bazelisk build //... --enable_bzlmod=true
    - name: Run example bazel build (bzlmod)
      env:
        USE_BAZEL_VERSION: 7.0.0
      run: bazelisk build //... --enable_bzlmod=true
      working-directory: ./examples
