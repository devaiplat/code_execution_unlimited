name: spine-tools/Spine-Toolbox
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  unit-tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        python-version:
        - 3.8
        - 3.9
        - 3.10
        - 3.11
        - 3.12
        os:
        - windows-latest
        - ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Version from Git tags
      run: git describe --tags
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: >
          pyproject.toml

          requirements.txt

          dev-requirements.txt
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install additional packages for Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y

        sudo apt-get install -y libegl1
    - name: Install dependencies
      env:
        PYTHONUTF8: 1
      run: |
        python -m pip install --upgrade pip

        python -m pip install -r requirements.txt

        python -m pip install -r dev-requirements.txt
    - name: List packages
      run: python -m pip list
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: |
        if [ "$RUNNER_OS" != "Windows" ]; then
          export QT_QPA_PLATFORM=offscreen
        fi

        coverage run -m unittest discover --verbose
      shell: bash
    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  execution-tests:
    name: Execution tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - 3.8
        - 3.9
        - 3.10
        - 3.11
        - 3.12
        os:
        - windows-latest
        - ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: >
          pyproject.toml

          requirements.txt

          dev-requirements.txt
    - name: Install additional packages for Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y

        sudo apt-get install -y libegl1
    - name: Install dependencies
      env:
        PYTHONUTF8: 1
      run: |
        python -m pip install --upgrade pip

        python -m pip install -r requirements.txt

        python -m pip install -r dev-requirements.txt
    - name: List packages
      run: python -m pip list
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: python -m unittest discover --pattern execution_test.py --verbose
