name: apache/fury
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  java:
    name: Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: PATH
    strategy:
      matrix:
        java-version:
        - 8
        - 11
        - 17
        - 21
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: temurin
    - name: Install bazel
      run: ./ci/run_ci.sh install_bazel
    - name: Install python
      run: ./ci/run_ci.sh install_python
    - name: Install pyfury
      run: ./ci/run_ci.sh install_pyfury
    - name: Run CI with Maven
      run: ./ci/run_ci.sh java${{ matrix.java-version }}
  openj9:
    name: Openj9 Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: PATH
    strategy:
      matrix:
        java-version:
        - 21
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: adopt-openj9
    - name: Install bazel
      run: ./ci/run_ci.sh install_bazel
    - name: Install python
      run: ./ci/run_ci.sh install_python
    - name: Install pyfury
      run: ./ci/run_ci.sh install_pyfury
    - name: Run CI with Maven
      run: ./ci/run_ci.sh java${{ matrix.java-version }}
  graalvm:
    name: GraalVM CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version:
        - 17
        - 21
        - 22
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: graalvm/setup-graalvm@v1
      with:
        java-version: ${{ matrix.java-version }}
        distribution: graalvm
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: true
    - name: Build native image and run
      run: ./ci/run_ci.sh graalvm_test
  scala:
    name: Scala CI
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up JDK8
      uses: actions/setup-java@v4
      with:
        java-version: 8
        distribution: temurin
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Install fury java
      run: cd java && mvn -T10 --no-transfer-progress clean install -DskipTests && cd -
    - name: Test (ces)
      run: |
        # Avoid sbt download jackson-databind error

        rm -rf /home/runner/.m2/repository/com/fasterxml/jackson/

        cd scala && sbt +test && cd -
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up JDK8
      uses: actions/setup-java@v4
      with:
        java-version: 8
        distribution: temurin
    - name: Run CI
      run: ./ci/run_ci.sh integration_tests
  javascript:
    name: JavaScript CI
    strategy:
      matrix:
        node-version:
        - 14.x
        - 16.x
        - 18.x
        - 20.x
        os:
        - ubuntu-latest
        - macos-13
        - windows-2022
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Upgrade npm
      run: npm install -g npm@8
    - name: Set up Python3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - name: Run CI with NodeJS
      run: python ./ci/run_ci.py javascript
  rust:
    name: Rust CI
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-12
        - macos-14
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Run Rust CI
      run: python ./ci/run_ci.py rust
  cpp:
    name: C++ CI
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-12
        - macos-14
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Run C++ CI with Bazel
      run: python ./ci/run_ci.py cpp
  python:
    name: Python CI
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
        - 3.7
        - 3.12
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install bazel
      run: ./ci/run_ci.sh install_bazel
    - name: Run Python CI
      run: ./ci/run_ci.sh python
  go:
    name: Golang CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version:
        - 1.13
        - 1.18
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    - name: Display Go version
      run: go version
    - name: Install bazel
      run: ./ci/run_ci.sh install_bazel
    - name: Install python
      run: ./ci/run_ci.sh install_python
    - name: Install pyfury
      run: ./ci/run_ci.sh install_pyfury
    - name: Run Golang CI
      run: ./ci/run_ci.sh go
  lint:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: oracle
    - name: Check License Header
      uses: korandoru/hawkeye@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - name: Check code style
      run: ./ci/run_ci.sh format
