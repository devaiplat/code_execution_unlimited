name: janhq/jan
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  base_branch_cov:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.ref }}
        repository: ${{ github.event.inputs.repoName }}
    - name: Use Node.js v20.9.0
      uses: actions/setup-node@v3
      with:
        node-version: v20.9.0
    - name: Install dependencies
      run: |
        yarn

        yarn build:core

        yarn build:joi
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run test coverage (ces) (ces)
      run: yarn test:coverage
    - name: Upload code coverage for ref branch
      uses: actions/upload-artifact@v4
      with:
        name: ref-lcov.info
        path: ./coverage/lcov.info
  test-on-macos:
    if: true
    runs-on:
    - self-hosted
    - macOS
    - macos-desktop
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      continue-on-error: true
      run: |
        rm -rf ~/jan

        make clean
    - name: Get Commit Message for PR
      if: github.event_name == 'pull_request'
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}})" >> $GITHUB_ENV
    - name: Get Commit Message for push event
      if: github.event_name == 'push'
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}})" >> $GITHUB_ENV
    - name: Config report portal
      run: |
        make update-playwright-config REPORT_PORTAL_URL=${{ secrets.REPORT_PORTAL_URL }} REPORT_PORTAL_API_KEY=${{ secrets.REPORT_PORTAL_API_KEY }} REPORT_PORTAL_PROJECT_NAME=${{ secrets.REPORT_PORTAL_PROJECT_NAME }} REPORT_PORTAL_LAUNCH_NAME="Jan App macos" REPORT_PORTAL_DESCRIPTION="${{env.REPORT_PORTAL_DESCRIPTION}}"
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      run: |
        npm config set registry ${{ secrets.NPM_PROXY }} --global

        yarn config set registry ${{ secrets.NPM_PROXY }} --global

        make test
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        TURBO_API: ${{ secrets.TURBO_API }}
        TURBO_TEAM: macos
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  test-on-macos-pr-target:
    if: true
    runs-on:
    - self-hosted
    - macOS
    - macos-desktop
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      continue-on-error: true
      run: |
        rm -rf ~/jan

        make clean
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      run: |
        npm config set registry https://registry.npmjs.org --global

        yarn config set registry https://registry.npmjs.org --global

        make test
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
  test-on-windows:
    if: true
    strategy:
      fail-fast: false
      matrix:
        antivirus-tools:
        - mcafee
        - default-windows-security
        - bit-defender
    runs-on: windows-desktop-${{ matrix.antivirus-tools }}
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      shell: powershell
      continue-on-error: true
      run: |
        $path = "$Env:APPDATA\jan"

        if (Test-Path $path) {
            Remove-Item "\\?\$path" -Recurse -Force
        } else {
            Write-Output "Folder does not exist."
        }

        make clean
    - name: Get Commit Message for push event
      if: github.event_name == 'push'
      shell: bash
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}}" >> $GITHUB_ENV
    - name: Config report portal
      shell: bash
      run: |
        make update-playwright-config REPORT_PORTAL_URL=${{ secrets.REPORT_PORTAL_URL }} REPORT_PORTAL_API_KEY=${{ secrets.REPORT_PORTAL_API_KEY }} REPORT_PORTAL_PROJECT_NAME=${{ secrets.REPORT_PORTAL_PROJECT_NAME }} REPORT_PORTAL_LAUNCH_NAME="Jan App Windows ${{ matrix.antivirus-tools }}" REPORT_PORTAL_DESCRIPTION="${{env.REPORT_PORTAL_DESCRIPTION}}"
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      shell: powershell
      run: |
        npm config set registry ${{ secrets.NPM_PROXY }} --global

        yarn config set registry ${{ secrets.NPM_PROXY }} --global

        make test
      env:
        TURBO_API: ${{ secrets.TURBO_API }}
        TURBO_TEAM: windows
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  test-on-windows-pr:
    if: true
    runs-on: windows-desktop-default-windows-security
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v1
      with:
        node-version: 20
    - name: Cleanup cache
      shell: powershell
      continue-on-error: true
      run: |
        $path = "$Env:APPDATA\jan"

        if (Test-Path $path) {
            Remove-Item "\\?\$path" -Recurse -Force
        } else {
            Write-Output "Folder does not exist."
        }

        make clean
    - name: Get Commit Message for PR
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}}" >> $GITHUB_ENV
    - name: Config report portal
      shell: bash
      run: |
        make update-playwright-config REPORT_PORTAL_URL=${{ secrets.REPORT_PORTAL_URL }} REPORT_PORTAL_API_KEY=${{ secrets.REPORT_PORTAL_API_KEY }} REPORT_PORTAL_PROJECT_NAME=${{ secrets.REPORT_PORTAL_PROJECT_NAME }} REPORT_PORTAL_LAUNCH_NAME="Jan App Windows" REPORT_PORTAL_DESCRIPTION="${{env.REPORT_PORTAL_DESCRIPTION}}"
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      shell: powershell
      run: |
        npm config set registry ${{ secrets.NPM_PROXY }} --global

        yarn config set registry ${{ secrets.NPM_PROXY }} --global

        make test
      env:
        TURBO_API: ${{ secrets.TURBO_API }}
        TURBO_TEAM: windows
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  test-on-windows-pr-target:
    if: true
    runs-on: windows-desktop-default-windows-security
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v1
      with:
        node-version: 20
    - name: Cleanup cache
      shell: powershell
      continue-on-error: true
      run: |
        $path = "$Env:APPDATA\jan"

        if (Test-Path $path) {
            Remove-Item "\\?\$path" -Recurse -Force
        } else {
            Write-Output "Folder does not exist."
        }

        make clean
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      shell: powershell
      run: |
        npm config set registry https://registry.npmjs.org --global

        yarn config set registry https://registry.npmjs.org --global

        make test
  test-on-ubuntu:
    runs-on:
    - self-hosted
    - Linux
    - ubuntu-desktop
    if: true
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      continue-on-error: true
      run: |
        rm -rf ~/jan

        make clean
    - name: Get Commit Message for PR
      if: github.event_name == 'pull_request'
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}}" >> $GITHUB_ENV
    - name: Get Commit Message for push event
      if: github.event_name == 'push'
      run: |
        echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}}" >> $GITHUB_ENV
    - name: Config report portal
      shell: bash
      run: |
        make update-playwright-config REPORT_PORTAL_URL=${{ secrets.REPORT_PORTAL_URL }} REPORT_PORTAL_API_KEY=${{ secrets.REPORT_PORTAL_API_KEY }} REPORT_PORTAL_PROJECT_NAME=${{ secrets.REPORT_PORTAL_PROJECT_NAME }} REPORT_PORTAL_LAUNCH_NAME="Jan App Linux" REPORT_PORTAL_DESCRIPTION="${{env.REPORT_PORTAL_DESCRIPTION}}"
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      run: |
        export DISPLAY=$(w -h | awk 'NR==1 {print $2}')

        echo -e "Display ID: $DISPLAY"

        npm config set registry ${{ secrets.NPM_PROXY }} --global

        yarn config set registry ${{ secrets.NPM_PROXY }} --global

        make test
      env:
        TURBO_API: ${{ secrets.TURBO_API }}
        TURBO_TEAM: linux
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  coverage-check:
    runs-on:
    - self-hosted
    - Linux
    - ubuntu-desktop
    needs: base_branch_cov
    if: true
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      continue-on-error: true
      run: |
        rm -rf ~/jan

        make clean
    - name: Download code coverage report from base branch
      uses: actions/download-artifact@v4
      with:
        name: ref-lcov.info
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test coverage (ces) (ces)
      run: |
        export DISPLAY=$(w -h | awk 'NR==1 {print $2}')

        echo -e "Display ID: $DISPLAY"

        npm config set registry ${{ secrets.NPM_PROXY }} --global

        yarn config set registry ${{ secrets.NPM_PROXY }} --global

        make lint

        yarn build:test

        yarn test:coverage
      env:
        TURBO_API: ${{ secrets.TURBO_API }}
        TURBO_TEAM: linux
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    - name: Generate Code Coverage report
      id: code-coverage
      uses: barecheck/code-coverage-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        base-lcov-file: ./lcov.info
        send-summary-comment: true
        show-annotations: warning
  test-on-ubuntu-pr-target:
    runs-on:
    - self-hosted
    - Linux
    - ubuntu-desktop
    if: true
    steps:
    - name: Getting the repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Installing node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cleanup cache
      continue-on-error: true
      run: |
        rm -rf ~/jan

        make clean
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Linter and test (ces) (ces)
      run: |
        export DISPLAY=$(w -h | awk 'NR==1 {print $2}')

        echo -e "Display ID: $DISPLAY"

        npm config set registry https://registry.npmjs.org --global

        yarn config set registry https://registry.npmjs.org --global

        make test
