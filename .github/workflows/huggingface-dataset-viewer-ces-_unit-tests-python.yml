name: huggingface/dataset-viewer
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  POETRY_VIRTUALENVS_IN_PROJECT: false
  mongo-port: 27017
  mongo-version: 6.0.9
  python-version: 3.9.18
  poetry-version: 1.8.2
  replicaset: rs0
jobs:
  unit-tests:
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install poetry
      run: pipx install poetry==${{ env.poetry-version }}
    - name: Use Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.python-version }}
        cache: poetry
        cache-dependency-path: >
          ${{ inputs.working-directory }}/poetry.lock
    - name: Install packages
      run: sudo apt update; sudo apt install -y ffmpeg libavcodec-extra libsndfile1
    - name: Install dependencies
      run: |
        poetry env use "${{ env.python-version }}"

        poetry install
    - name: Launch mongo
      env:
        MONGO_PORT: ${{ env.mongo-port }}
        MONGO_REPLICASET: ${{ env.replicaset }}
      run: docker compose -f docker-compose-mongo.yml up -d --wait --wait-timeout 20
      working-directory: ./tools
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run unit tests (ces) (ces)
      env:
        CACHE_MONGO_URL: mongodb://localhost:${{ env.mongo-port }}
        QUEUE_MONGO_URL: mongodb://localhost:${{ env.mongo-port }}
        DATABASE_MIGRATIONS_MONGO_URL: mongodb://localhost:${{ env.mongo-port }}
        CI_SPAWNING_TOKEN: ${{ secrets.CI_SPAWNING_TOKEN }}
        ASSETS_STORAGE_ROOT: /tmp/assets
        CACHED_ASSETS_STORAGE_ROOT: /tmp/cached-assets
        S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
        S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        CLOUDFRONT_KEY_PAIR_ID: K3814DK2QUJ71H
        CLOUDFRONT_PRIVATE_KEY: ${{ secrets.CLOUDFRONT_PRIVATE_KEY }}
      run: poetry run python -m pytest -s
