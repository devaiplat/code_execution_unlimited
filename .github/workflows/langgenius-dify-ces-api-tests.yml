name: langgenius/dify
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: api-tests-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  test:
    name: API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - 3.10
        - 3.11
        - 3.12
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Poetry
      uses: abatilo/actions-poetry@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: poetry
        cache-dependency-path: >
          api/pyproject.toml

          api/poetry.lock
    - name: Poetry check
      run: |
        poetry check -C api --lock

        poetry show -C api
    - name: Install dependencies
      run: poetry install -C api --with dev
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Unit tests (ces) (ces)
      run: poetry run -C api bash dev/pytest/pytest_unit_tests.sh
    - name: Run ModelRuntime
      run: poetry run -C api bash dev/pytest/pytest_model_runtime.sh
    - name: Run Tool
      run: poetry run -C api bash dev/pytest/pytest_tools.sh
    - name: Set up dotenvs
      run: |
        cp docker/.env.example docker/.env

        cp docker/middleware.env.example docker/middleware.env
    - name: Expose Service Ports
      run: sh .github/workflows/expose_service_ports.sh
    - name: Set up Sandbox
      uses: hoverkraft-tech/compose-action@v2.0.0
      with:
        compose-file: >
          docker/docker-compose.middleware.yaml
        services: >
          sandbox

          ssrf_proxy
    - name: Run Workflow
      run: poetry run -C api bash dev/pytest/pytest_workflow.sh
    - name: Set up Vector Stores (Weaviate, Qdrant, PGVector, Milvus, PgVecto-RS, Chroma, MyScale, ElasticSearch)
      uses: hoverkraft-tech/compose-action@v2.0.0
      with:
        compose-file: >
          docker/docker-compose.yaml
        services: >
          weaviate

          qdrant

          etcd

          minio

          milvus-standalone

          pgvecto-rs

          pgvector

          chroma

          elasticsearch
    - name: Test Vector Stores (ces)
      run: poetry run -C api bash dev/pytest/pytest_vdb.sh
