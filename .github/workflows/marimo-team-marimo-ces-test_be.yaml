name: marimo-team/marimo
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  MARIMO_SKIP_UPDATE_CHECK: 1
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: >
          backend:
            - 'marimo/**'
            - 'tests/**'
            - 'pyproject.toml'
  test_python:
    needs: changes
    if: true
    name: ${{ matrix.os }} / Py ${{ matrix.python-version }} / ${{ matrix.dependencies }} deps
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        dependencies:
        - core
        - core,optional
        python-version:
        - 3.8
        include:
        - os: ubuntu-latest
          python-version: 3.9
          dependencies: core
        - os: ubuntu-latest
          python-version: 3.10
          dependencies: core
        - os: ubuntu-latest
          python-version: 3.11
          dependencies: core
        - os: ubuntu-latest
          python-version: 3.12
          dependencies: core
        - os: ubuntu-latest
          python-version: 3.9
          dependencies: core,optional
        - os: ubuntu-latest
          python-version: 3.10
          dependencies: core,optional
        - os: ubuntu-latest
          python-version: 3.11
          dependencies: core,optional
        - os: ubuntu-latest
          python-version: 3.12
          dependencies: core,optional
    steps:
    - name: "\U0001F6D1 Cancel Previous Runs"
      uses: styfle/cancel-workflow-action@0.12.1
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: "\U0001F40D Setup uv"
      uses: yezz123/setup-uv@v4
    - name: Create assets directory, copy over index.html
      run: |
        mkdir -p marimo/_static/assets

        cp frontend/index.html marimo/_static/index.html

        cp frontend/public/favicon.ico marimo/_static/favicon.ico
    - name: Install marimo with dev dependencies
      run: |
        uv venv marimo-dev-env

        if [ "$RUNNER_OS" == "Windows" ]; then
          source marimo-dev-env\\Scripts\\activate
        else
          source marimo-dev-env/bin/activate
        fi

        uv pip install --upgrade pip

        uv pip install .[dev]
    - name: Lint
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          source marimo-dev-env\\Scripts\\activate
        else
          source marimo-dev-env/bin/activate
        fi

        ruff check marimo/
    - name: Typecheck
      if: ${{ matrix.python-version == '3.11' || matrix.python-version == '3.12' }}
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          source marimo-dev-env\\Scripts\\activate
        else
          source marimo-dev-env/bin/activate
        fi

        mypy --config-file pyproject.toml marimo/
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test with minimal dependencies (ces) (ces)
      if: ${{ matrix.dependencies == 'core' }}
      run: |
        uv venv marimo-test-env

        if [ "$RUNNER_OS" == "Windows" ]; then
          source marimo-test-env\\Scripts\\activate
        else
          source marimo-test-env/bin/activate
        fi

        uv pip install --upgrade pip

        uv pip install .[testcore]

        pytest -v tests/ -k "not test_cli"
    - name: Test with optional dependencies (ces)
      if: ${{ matrix.dependencies == 'core,optional' }}
      run: |
        uv venv marimo-test-optional-env

        if [ "$RUNNER_OS" == "Windows" ]; then
          source marimo-test-optional-env\\Scripts\\activate
        else
          source marimo-test-optional-env/bin/activate
        fi

        uv pip install --upgrade pip

        uv pip install .[testcore,testoptional]

        pytest -v tests/ -k "not test_cli"
