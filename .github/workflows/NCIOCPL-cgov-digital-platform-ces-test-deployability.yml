name: NCIOCPL/cgov-digital-platform
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.ref_name }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  test_update:
    name: Test ability to update
    needs: check_for_past_run
    if: true
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:5.7
        ports:
        - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drupal
          MYSQL_USER: drupal
          MYSQL_PASSWORD: drupal
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    steps:
    - name: Checkout master branch from Github
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.ref }}
        repository: ${{ github.event.inputs.repoName }}
    - name: Setup PHP with tools
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: bz2, curl, gd, mbstring, memcached, mysql, oauth, opcache, readline, sqlite3, soap, xml
        tools: composer:v2
    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: >
          ${{ runner.os }}-composer-
    - name: Composer install
      run: |
        composer install
    - name: Put BLT, Drush, etc. on the path.
      run: |
        echo "$PWD/vendor/bin" >> $GITHUB_PATH
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Setup Env
      run: |
        ## The mynci service creates the drupal DB, we need to make the

        ## simpletest DB for the phpunit tests by hand here.

        mysql -u root -proot --protocol=TCP -e "CREATE DATABASE IF NOT EXISTS simpletest"

        mysql -u root -proot --protocol=TCP -e "GRANT ALL ON simpletest.* to 'simpletest'@'%' IDENTIFIED BY 'simpletest'"

        ## We don't set git info for right now as we are in the NCIOCPL origin right now.
    - name: Install Drupal (current production)
      run: |
        # Install with content

        blt blt:init:settings --define drush.alias='${drush.aliases.ci}' --environment=ci --no-interaction --ansi --verbose

        blt cgov:reinstall --define drush.alias='${drush.aliases.ci}' --environment=ci --no-interaction --ansi --verbose
    - name: Switch to the branch from the pull request.
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install new code and run update.
      run: |
        composer cgov-clean && composer install

        drush cr

        blt drupal:update --define drush.alias='${drush.aliases.ci}' --environment=ci --no-interaction --ansi --verbose
  check_for_past_run:
    name: Check for past successful run
    runs-on: ubuntu-20.04
    outputs:
      changed: ${{ steps.record_change.outputs.changed }}
      key: ${{ steps.install_files_hash.outputs.key }}
    steps:
    - name: Checkout branch from Github
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Generate install files hash
      id: install_files_hash
      run: |
        echo "key=${{ runner.os }}-install-hash-$(find . -type f \( -path "*/modules/custom/*/*.install" -o -path "*/config/install/*.yml" -o -path ./.github/workflows/test-deployability.yml \) -exec md5sum {} + | sort | awk '{print $NF}' | tr -d '\n' | md5sum)" >> "$GITHUB_OUTPUT"
    - name: Locate Cache
      uses: actions/cache/restore@v3
      id: retrieve_files_hash
      with:
        path: dummy.txt
        key: ${{ steps.install_files_hash.outputs.key }}
        lookup-only: true
    - name: Record a change to the install files
      id: record_change
      if: steps.retrieve_files_hash.outputs.cache-hit != 'true'
      run: |
        echo "changed=true" >> "$GITHUB_OUTPUT"
  save_successful_run:
    name: Save install files hash
    needs:
    - check_for_past_run
    - test_update
    runs-on: ubuntu-20.04
    steps:
    - name: Dummy file
      run: |
        touch dummy.txt
    - name: Save install files cache
      uses: actions/cache/save@v3
      with:
        path: dummy.txt
        key: ${{ needs.check_for_past_run.outputs.key }}
