name: pytorch/pytorch
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test:
    if: true
    defaults:
      run:
        shell: bash -e -l {0}
    strategy:
      matrix: ${{ fromJSON(inputs.test-matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    timeout-minutes: ${{ matrix.mem_leak_check == 'mem_leak_check' && 600 || inputs.timeout-minutes }}
    env:
      GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
      TEST_CONFIG: ${{ matrix.config }}
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      PR_BODY: ${{ github.event.pull_request.body }}
    steps:
    - name: Print runner OS/HW info
      run: |
        sysctl machdep.cpu.brand_string kern.osproductversion
    - name: Clean up leftover processes on MacOS pet runner
      continue-on-error: true
      run: |
        for PROCESS in "python" "conda" "ninja" "clang"; do
          echo "Cleaning up all remaining ${PROCESS} process"
          pkill "${PROCESS}" || true
        done
    - name: Clean up leftover local python3 site-packages on MacOS pet runner
      continue-on-error: true
      run: |
        for dir in  ~/.local/lib/python3.*/site-packages; do
          echo "Cleaning up ${dir}"
          rm -rf "${dir}"
        done
    - name: Clean up disk space before running MacOS workflow
      uses: pytorch/test-infra/.github/actions/check-disk-space@main
    - name: Checkout PyTorch
      uses: pytorch/pytorch/.github/actions/checkout-pytorch@main
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Download build artifacts
      uses: ./.github/actions/download-build-artifacts
      with:
        name: ${{ inputs.build-environment }}
        use-gha: true
    - name: Download TD artifacts
      continue-on-error: true
      uses: ./.github/actions/download-td-artifacts
      with:
        use-gha: true
    - name: Setup miniconda
      uses: pytorch/test-infra/.github/actions/setup-miniconda@main
      with:
        python-version: ${{ inputs.python-version }}
        environment-file: .github/requirements/conda-env-${{ runner.os }}-${{ runner.arch }}
        pip-requirements-file: .github/requirements/pip-requirements-${{ runner.os }}.txt
    - name: Start monitoring script
      id: monitor-script
      continue-on-error: true
      run: |
        ${CONDA_RUN} python3 -m tools.stats.monitor > usage_log.txt 2>&1 &

        echo "monitor-script-pid=${!}" >> "${GITHUB_OUTPUT}"
    - name: Parse ref
      id: parse-ref
      run: .github/scripts/parse_ref.py
    - name: Get workflow job id
      id: get-job-id
      uses: ./.github/actions/get-workflow-job-id
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Check for keep-going label and re-enabled test issues (ces) (ces)
      id: keep-going
      uses: ./.github/actions/filter-test-configs
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        test-matrix: ${{ inputs.test-matrix }}
        job-name: ${{ steps.get-job-id.outputs.job-name }}
    - name: Set Test step time (ces)
      id: test-timeout
      shell: bash
      env:
        JOB_TIMEOUT: ${{ matrix.mem_leak_check == 'mem_leak_check' && 600 || inputs.timeout-minutes }}
      run: |
        echo "timeout=$((JOB_TIMEOUT-30))" >> "${GITHUB_OUTPUT}"
    - name: Test (ces)
      id: test
      timeout-minutes: ${{ fromJson(steps.test-timeout.outputs.timeout) }}
      env:
        PYTORCH_TEST_CUDA_MEM_LEAK_CHECK: ${{ matrix.mem_leak_check && '1' || '0' }}
        PYTORCH_TEST_RERUN_DISABLED_TESTS: ${{ matrix.rerun_disabled_tests && '1' || '0' }}
        CONTINUE_THROUGH_ERROR: ${{ steps.keep-going.outputs.keep-going }}
        VERBOSE_TEST_LOGS: ${{ steps.keep-going.outputs.ci-verbose-test-logs }}
        TEST_SHOWLOCALS: ${{ steps.keep-going.outputs.ci-test-showlocals }}
        NO_TEST_TIMEOUT: ${{ steps.keep-going.outputs.ci-no-test-timeout }}
        NO_TD: ${{ steps.keep-going.outputs.ci-no-td }}
        PIP_REQUIREMENTS_FILE: .github/requirements/pip-requirements-${{ runner.os }}.txt
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
        GITHUB_JOB: ${{ github.job }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
        JOB_ID: ${{ steps.get-job-id.outputs.job-id }}
        JOB_NAME: ${{ steps.get-job-id.outputs.job-name }}
        REENABLED_ISSUES: ${{ steps.keep-going.outputs.reenabled-issues }}
      run: |
        # shellcheck disable=SC1090

        set -ex


        arch


        if [[ -n "$CONDA_ENV" ]]; then
          # Use binaries under conda environment
          export PATH="$CONDA_ENV/bin":$PATH
        fi


        # Print out some information about the test environment

        which conda

        conda --version

        ${CONDA_RUN} which python3

        ${CONDA_RUN} python3 --version

        ${CONDA_RUN} which python

        ${CONDA_RUN} python --version


        ${CONDA_RUN} python3 -mpip install --no-index --no-deps dist/*.whl


        set +e

        pushd "${RUNNER_TEMP}"

        # Install pip dependencies if they are not found. This is to mitigate a peculiar

        # flaky missing dependencies on MacOS

        ${CONDA_RUN} python3 -c "import torch"

        RC=$?

        popd


        if [ "${RC}" -ne 0 ]; then
          ${CONDA_RUN} python3 -mpip install --ignore-installed -r "${PIP_REQUIREMENTS_FILE}"
        fi

        set -e


        ${CONDA_RUN} .ci/pytorch/macos-test.sh
    - name: Print remaining test logs (ces)
      shell: bash
      if: always() && steps.test.conclusion
      run: |
        cat test/**/*_toprint.log || true
    - name: Stop monitoring script
      if: always() && ${{ steps.monitor-script.outputs.monitor-script-pid }}
      continue-on-error: true
      env:
        MONITOR_SCRIPT_PID: ${{ steps.monitor-script.outputs.monitor-script-pid }}
      run: |
        kill "$MONITOR_SCRIPT_PID"
    - name: Upload test artifacts (ces)
      uses: ./.github/actions/upload-test-artifacts
      if: always() && steps.test.conclusion && steps.test.conclusion != 'skipped'
      with:
        use-gha: true
        file-suffix: ${{ github.job }}-${{ matrix.config }}-${{ matrix.shard }}-${{ matrix.num_shards }}-${{ matrix.runner }}_${{ steps.get-job-id.outputs.job-id }}
    - name: Clean up disk space
      if: always()
      continue-on-error: true
      uses: pytorch/test-infra/.github/actions/check-disk-space@main
