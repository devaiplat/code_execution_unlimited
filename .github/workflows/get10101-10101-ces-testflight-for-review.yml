name: get10101/10101
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  run_task:
    name: Run Task
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: List installations Xcode version
      run: sudo ls -1 /Applications | grep "Xcode"
    - name: List used Xcode version
      run: /usr/bin/xcodebuild -version
    - name: Select different xcode version
      run: sudo xcode-select -s '/Applications/Xcode_15.2.app/Contents/Developer'
    - name: List used Xcode version
      run: /usr/bin/xcodebuild -version
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: stable
        cache: true
        cache-key: flutter-${{ env.FLUTTER_VERSION }}
        cache-path: ${{ runner.tool_cache }}/flutter
    - name: Check cocoapods version
      run: /usr/local/bin/pod --version
    - name: Re-install cocoapods
      run: sudo gem install cocoapods
    - name: Check cocoapods version
      run: /usr/local/bin/pod --version
    - name: Install just
      run: cargo install just --force
    - name: Install fastlane
      run: |
        cd mobile/ios/fastlane

        gem install bundler

        bundle install

        bundle info fastlane
    - name: Install FFI bindings
      run: just deps-gen --force
    - name: Install ios dependencies
      run: cargo install cargo-lipo --force
    - name: Set rustup targets
      run: rustup target add aarch64-apple-ios x86_64-apple-ios
    - name: Generate FFI bindings
      run: just gen
    - name: Build iOS Rust lib in release mode
      run: just ios-release
    - name: Parse version from pubspec.yaml
      id: version
      uses: jbutcher5/read-yaml@1.6
      with:
        file: mobile/pubspec.yaml
        key-path: '["version"]'
    - name: Build iOS Archive
      id: build-ios
      run: |
        NETWORK=$NETWORK just build-ipa-no-codesign
      env:
        ELECTRS_ENDPOINT: http://146.0.73.175:3003
        COORDINATOR_P2P_ENDPOINT: 021eddb3062fddef2c24f16f6de55fbd78ab985b74b41858719def46321d4be7d0@146.0.73.175:9045
        NETWORK: signet
        COORDINATOR_PORT_HTTP: 80
        ORACLE_ENDPOINT: http://146.0.73.175:8081
        ORACLE_PUBKEY: 5d12d79f575b8d99523797c46441c0549eb0defb6195fe8a080000cbe3ab3859
        MEME_ENDPOINT: http://api.10101.finance/memes/
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Put for beta testing app for review (ces) (ces)
      env:
        FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
        FASTLANE_APP_STORE_CONNECT_TEAM_ID: ${{ secrets.FASTLANE_APP_STORE_CONNECT_TEAM_ID }}
        FASTLANE_DEVELOPER_PORTAL_TEAM_ID: ${{ secrets.FASTLANE_DEVELOPER_PORTAL_TEAM_ID }}
        FASTLANE_TEMP_KEYCHAIN_USER: ${{ secrets.FASTLANE_TEMP_KEYCHAIN_USER }}
        FASTLANE_TEMP_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_TEMP_KEYCHAIN_PASSWORD }}
        FASTLANE_APPLE_ISSUER_ID: ${{ secrets.FASTLANE_APPLE_ISSUER_ID }}
        FASTLANE_APPLE_KEY_ID: ${{ secrets.FASTLANE_APPLE_KEY_ID }}
        FASTLANE_APPLE_KEY_CONTENT: ${{ secrets.FASTLANE_APPLE_KEY_CONTENT }}
        FASTLANE_GIT_AUTHORIZATION: ${{ secrets.FASTLANE_GIT_AUTHORIZATION }}
        MATCH_PASSWORD: ${{ secrets.FASTLANE_MATCH_PASSWORD }}
        FASTLANE_DEVELOPER_APP_ID: ${{ secrets.FASTLANE_DEVELOPER_REGTEST_APP_ID }}
        FASTLANE_DEVELOPER_APP_IDENTIFIER: finance.get10101.app.test
        FASTLANE_PROVISIONING_PROFILE_SPECIFIER: match AppStore finance.get10101.app.test
        FASTLANE_APP_SCHEME: test
      run: |
        just publish-ios-to-group
    - name: Print fastlane gym logs
      if: always()
      run: cat /Users/runner/Library/Logs/gym/10101*.log
