name: ccao-data/data-architecture
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build-and-test-dbt:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup dbt
      uses: ./.github/actions/setup_dbt
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
        role-duration-seconds: 14400
    - name: Restore dbt state cache
      id: cache
      uses: ./.github/actions/restore_dbt_cache
      with:
        path: ${{ env.PROJECT_DIR }}/${{ env.STATE_DIR }}
        key: ${{ env.CACHE_KEY }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set command args for building/testing resources (ces) (ces)
      run: |
        if [[ $CACHE_HIT == 'true' ]]; then
          echo "MODIFIED_RESOURCES_ONLY=true" >> "$GITHUB_ENV"
        fi

        if [[ $EVENT_NAME == 'workflow_dispatch' ]]; then
            echo "MANUALLY_DISPATCHED=true" >> "$GITHUB_ENV"
        fi
      shell: bash
      env:
        CACHE_HIT: ${{ steps.cache.outputs.cache-hit }}
        EVENT_NAME: ${{ github.event_name }}
    - name: Test dbt macros (ces)
      run: dbt run-operation test_all
      working-directory: ${{ env.PROJECT_DIR }}
      shell: bash
    - name: Deploy model dependencies
      run: ../.github/scripts/deploy_dbt_model_dependencies.sh
      working-directory: ${{ env.PROJECT_DIR }}
      shell: bash
    - name: Build models
      run: |
        if [[ $MODIFIED_RESOURCES_ONLY == 'true' ]]; then
          if [[ $MANUALLY_DISPATCHED == 'true' ]]; then
            echo "Running build on manually selected resources"
            dbt build -t "$TARGET" -s ${{ inputs.models }} --defer --state "$STATE_DIR" --resource-types model seed
          else
            echo "Running build on modified/new resources only"
            dbt build -t "$TARGET" -s state:modified state:new --defer --state "$STATE_DIR" --resource-types model seed
          fi
        else
          echo "Running build on all resources"
          dbt build -t "$TARGET" --resource-types model seed
        fi
      working-directory: ${{ env.PROJECT_DIR }}
      shell: bash
    - name: Test models (ces)
      run: |
        if [[ $MODIFIED_RESOURCES_ONLY == 'true' ]]; then
          if [[ $MANUALLY_DISPATCHED == 'true' ]]; then
            echo "Running tests on manually selected resources"
            dbt test -t "$TARGET" -s ${{ inputs.models }} --exclude "tag:data_test_iasworld" --defer --state "$STATE_DIR"
          else
            echo "Running tests on modified/new resources only"
            dbt test -t "$TARGET" -s state:modified state:new --exclude "tag:data_test_iasworld" --defer --state "$STATE_DIR"
          fi
        else
          echo "Running tests on all resources"
          dbt test -t "$TARGET" --exclude "tag:data_test_iasworld"
        fi
      working-directory: ${{ env.PROJECT_DIR }}
      shell: bash
    - if: github.ref == 'refs/heads/master' && success()
      name: Update dbt state cache
      uses: ./.github/actions/save_dbt_cache
      with:
        path: ${{ env.PROJECT_DIR }}/${{ env.TARGET_DIR }}
        key: ${{ env.CACHE_KEY }}
