name: vectordotdev/vector
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  AWS_ACCESS_KEY_ID: dummy
  AWS_SECRET_ACCESS_KEY: dummy
  CONTAINER_TOOL: docker
  DD_ENV: ci
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  CARGO_NET_GIT_FETCH_WITH_CLI: true
jobs:
  changes:
    uses: ./.github/workflows/changes.yml
    secrets: inherit
    with:
      base_ref: ${{ github.event.merge_group.base_ref || github.event.pull_request.base.ref }}
      head_ref: ${{ github.event.merge_group.head_ref || github.event.pull_request.head.ref }}
  checks:
    name: Checks
    runs-on: ubuntu-20.04-8core
    timeout-minutes: 60
    needs: changes
    env:
      CARGO_INCREMENTAL: 0
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/cache@v4
      name: Cache Cargo registry + index
      with:
        path: >
          ~/.cargo/bin/

          ~/.cargo/registry/index/

          ~/.cargo/registry/cache/

          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: >
          ${{ runner.os }}-cargo-
    - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
    - uses: ruby/setup-ruby@v1
    - run: bash scripts/environment/prepare.sh
    - name: Enable Rust matcher
      run: echo "::add-matcher::.github/matchers/rust.json"
    - name: Check code format
      run: make check-fmt
    - name: Check clippy
      if: needs.changes.outputs.source == 'true'
      run: make check-clippy
    - name: Unit - x86_64-unknown-linux-gnu
      run: make test
      env:
        CARGO_BUILD_JOBS: 5
    - name: Check Component Spec
      run: make test-component-validation
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Upload test results (ces) (ces)
      run: scripts/upload-test-results.sh
      if: always()
    - name: Check version
      run: make check-version
    - name: Check scripts
      run: make check-scripts
    - name: Check events
      if: needs.changes.outputs.source == 'true'
      run: make check-events
    - name: Check that the 3rd-party license file is up to date
      if: needs.changes.outputs.dependencies == 'true'
      run: make check-licenses
    - name: Check Cue docs
      if: needs.changes.outputs.cue == 'true'
      run: make check-docs
    - name: Check Markdown
      if: needs.changes.outputs.markdown == 'true'
      run: make check-markdown
    - name: Check Component Docs
      if: needs.changes.outputs.source == 'true' || needs.changes.outputs.component_docs == 'true'
      run: make check-component-docs
    - name: Check Rust Docs
      if: needs.changes.outputs.source == 'true'
      run: cd rust-doc && make docs
    - name: VRL - Linux
      if: needs.changes.outputs.source == 'true' || needs.changes.outputs.cue == 'true'
      run: cargo vdev test-vrl
    - name: Build VRL Playground
      if: needs.changes.outputs.source == 'true' || needs.changes.outputs.dependencies == 'true'
      run: |
        cd lib/vector-vrl/web-playground/

        wasm-pack build --target web --out-dir public/pkg
  all-checks:
    name: Test Suite
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    if: true
    needs:
    - changes
    - checks
    env:
      FAILED: ${{ contains(needs.*.result, 'failure') }}
    steps:
    - run: |
        echo "failed=${{ env.FAILED }}"

        if [[ "$FAILED" == "true" ]] ; then
          exit 1
        else
          exit 0
        fi
