# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: ts-js - AlexGalhardo/microsaas.alexgalhardo.com

on:
   workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: 'Base64 encoded patch content'
        required: false
        default: ''
      command:
        description: 'Base64 encoded command content'
        required: false
        default: ''
      ref:
        description: 'The branch, tag, or commit SHA to checkout'
        required: false

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        #- windows-latest
        node-version:
        #- 22
        #- 20
        - 18 # pnpm requires at least Node.js v18.12
        #- 16
        #- 14
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
           repository: ${{ github.event.inputs.repoName }}
           ref: ${{ github.event.inputs.ref }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
      
    - name: Search for package.json
      id: search-package-json
      shell: bash
      run: |
        # Check if package.json exists in the root folder
        if [ -f "./package.json" ]; then
          PACKAGE_JSON_PATH="./package.json"
        else
          # Search for package.json file in the repository if not found in root
          PACKAGE_JSON_PATH=$(find . -name 'package.json' | head -n 1)
        fi

        if [ -z "$PACKAGE_JSON_PATH" ]; then
          echo "No package.json found"
          exit 1
        fi
        echo "package_json_path=$(dirname "$PACKAGE_JSON_PATH")" >> $GITHUB_ENV

    - name: Enable Corepack and Install correct package manager version
      shell: bash
      run: |
        PACKAGE_MANAGER=$(node -e "const pkg = require('${{ env.package_json_path }}/package.json'); console.log(pkg.packageManager);")
        if [[ $PACKAGE_MANAGER == yarn@* ]]; then
          corepack enable
          PACKAGE_MANAGER_VERSION=${PACKAGE_MANAGER#yarn@}
          corepack prepare yarn@$PACKAGE_MANAGER_VERSION --activate
        elif [[ $PACKAGE_MANAGER == pnpm@* ]]; then
          corepack enable
          PACKAGE_MANAGER_VERSION=${PACKAGE_MANAGER#pnpm@}
          corepack prepare pnpm@$PACKAGE_MANAGER_VERSION --activate
        fi

    - name: Check and Sync yarn.lock, package-lock.json or pnpm-lock.yaml
      shell: bash
      working-directory: ${{ env.package_json_path }}
      run: |
        if [ -f yarn.lock ]; then
          echo "yarn.lock found. Checking if in sync with package.json..."
          if ! yarn check --integrity; then
            echo "yarn.lock is not in sync with package.json. Running 'yarn install' to synchronize..."
            yarn install --frozen-lockfile || yarn install || true
          else
            echo "yarn.lock and package.json are in sync."
          fi
        elif [ -f pnpm-lock.yaml ]; then
          echo "pnpm-lock.yaml found. Install pnpm then checking if in sync with package.json..."
          npm install -g pnpm
          if ! pnpm list > /dev/null 2>&1; then
            echo "package.json and pnpm-lock.yaml are not in sync. Try running 'pnpm install' to synchronize..."
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile || true
            if ! pnpm list > /dev/null 2>&1; then
              echo "Failed to fully synchronize pnpm-lock.yaml with package.json, but continuing..."
            fi
          else
            echo "package.json and pnpm-lock.yaml are in sync."
          fi
        elif [ -f package.json ]; then
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found, generating without run any script to avoid missing package issue ..."
            npm install --package-lock-only --ignore-scripts
          else
            echo "package-lock.json found, checking if in sync with package.json..."
            if ! npm ls > /dev/null 2>&1; then
              echo "package.json and package-lock.json are not in sync. Running npm without run any script to avoid missing package issue to synchronize..."
              npm install --package-lock-only --ignore-scripts
              if ! npm ls > /dev/null 2>&1; then
                echo "Failed to fully synchronize package-lock.json with package.json, but continuing..."
              fi
            else
              echo "package.json and package-lock.json are in sync."
            fi
          fi
        else
          echo "Neither yarn.lock, pnpm-lock.yaml nor package-lock.json found. Please ensure one of them is present in the repository."
          exit 1
        fi

    - name: Install dependencies with npm or pnpm
      shell: bash
      working-directory: ${{ env.package_json_path }}
      run: |
        if [ -f yarn.lock ]; then
          yarn install --frozen-lockfile || yarn install || true
        elif [ -f package-lock.json ]; then
          npm ci
        elif [ -f pnpm-lock.yaml ]; then
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile || true
        else
          echo "No lock file found, job should be failed, but for project build and run test, add package-lock.json file."
          npm install --package-lock-only
          echo "Proceeding with dependency installation..."
          npm ci
        fi

    - name: Apply patch if provided, decode base64
      shell: bash
      working-directory: ${{ env.package_json_path }}
      run: |
          if [ -n "${{ github.event.inputs.patch }}" ]; then
            echo "Patch input provided. Applying patch..."
            echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
            echo "Decoded patch content:"
            cat patch.diff 
            echo "Apply the patch:"
            git apply --verbose patch.diff
          else
            echo "No patch input provided. Skipping patch application."
          fi
          echo "Print git diff on local repo"
          git diff
      
    - name: Build (ces)
      working-directory: ${{ env.package_json_path }}
      shell: bash
      run: |
        if [ -f "package.json" ] && [ "$(node -e "const pkg = require('./package.json'); console.log(pkg.scripts && pkg.scripts.build ? 'true' : 'false');")" = "true" ]; then
          if [ -f yarn.lock ]; then
            yarn run build
          elif [ -f "package-lock.json" ]; then
            npm run build
          elif [ -f "pnpm-lock.yaml" ]; then
            pnpm run build
          else
            echo "Lock file not found. Cannot run build scripts."
            exit 1
          fi
        else
          echo "No build script found in package.json"
        fi

    - name: Run custom command
      working-directory: ${{ env.package_json_path }}
      shell: bash
      run: |
         if [ -n "${{ github.event.inputs.command }}" ]; then
           echo "Start running custom command"         
           echo "${{ github.event.inputs.command }}"
           output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
           echo "Decoded custom command is:"
           echo $output
           echo "!!==================================!!"
           echo "Command output:"
           echo "!!==================================!!"
           eval $output
           echo "!!==================================!!"
           echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
           echo "Finished running custom command!"
           echo "!!== RUN COMPLETED ==!!"
         fi
      
    - name: Run Test (ces)
      working-directory: ${{ env.package_json_path }}
      shell: bash
      if: env.RAN_CUSTOM_COMMAND != 'true'
      run: |
        if [ -f "package.json" ] && [ "$(node -e "const pkg = require('./package.json'); console.log(pkg.scripts && pkg.scripts.test ? true : false);")" = "true" ]; then
          echo "Test script found in package.json."
          if [ -f yarn.lock ]; then
            yarn test
          elif [ -f "package-lock.json" ]; then
            npm test
          elif [ -f "pnpm-lock.yaml" ]; then
            pnpm test
          else
            echo "Lock file not found. Cannot run test scripts."
            exit 1
          fi
        else
          echo "No test script found in package.json."
          exit 0
        fi
        echo "!!== RUN COMPLETED ==!!"