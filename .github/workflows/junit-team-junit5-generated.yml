name: junit-team/junit5
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        distribution: graalvm-community
        version: latest
        java-version: 21
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      uses: ./.github/actions/main-build
      with:
        arguments: >
          -Ptesting.enableJaCoCo \

          build \

          jacocoRootReport
    - name: Upload to Codecov.io
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  Windows:
    runs-on: windows-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Build
      uses: ./.github/actions/main-build
  macOS:
    runs-on: macos-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Build
      uses: ./.github/actions/main-build
  publish_artifacts:
    name: Publish Snapshot Artifacts
    needs: linux
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write
    if: true
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Publish
      uses: ./.github/actions/run-gradle
      env:
        ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}
        ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
      with:
        arguments: >
          publish -x check \

          prepareGitHubAttestation \

          --no-configuration-cache
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Generate build provenance attestations (ces) (ces)
      uses: actions/attest-build-provenance@210c1913531870065f03ce1f9440dd87bc0938cd
      with:
        subject-path: documentation/build/attestation/*.jar
  documentation:
    name: Build Documentation
    concurrency:
      group: github-pages
      cancel-in-progress: true
    needs: Linux
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Graphviz
      run: |
        sudo apt-get update

        sudo apt-get install graphviz
    - name: Build Documentation
      uses: ./.github/actions/run-gradle
      with:
        arguments: >
          prepareDocsForUploadToGhPages \

          -Dscan.tag.Documentation \

          --no-configuration-cache
    - name: Upload Documentation
      if: github.event_name == 'push' && github.repository == 'junit-team/junit5' && github.ref == 'refs/heads/main'
      uses: ./.github/actions/run-gradle
      with:
        arguments: >
          gitPublishPush \

          -Dscan.tag.Documentation \

          --no-configuration-cache
      env:
        GRGIT_USER: ${{ secrets.GH_TOKEN }}
