name: netbox-community/netbox
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NETBOX_CONFIGURATION: netbox.configuration_testing
    strategy:
      matrix:
        python-version:
        - 3.10
        - 3.11
        - 3.12
        node-version:
        - 18.x
    services:
      redis:
        image: redis
        ports:
        - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_USER: netbox
          POSTGRES_PASSWORD: netbox
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 5432:5432
    steps:
    - name: Check out repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Yarn Package Manager
      run: npm install -g yarn
    - name: Setup Node.js with Yarn Caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: yarn
        cache-dependency-path: netbox/project-static/yarn.lock
    - name: Install Frontend Dependencies
      run: yarn --cwd netbox/project-static
    - name: Install dependencies & set up configuration
      run: |
        python -m pip install --upgrade pip

        pip install -r requirements.txt

        pip install pycodestyle coverage tblib
    - name: Build documentation
      run: mkdocs build
    - name: Collect static files
      run: python netbox/manage.py collectstatic --no-input
    - name: Check for missing migrations
      run: python netbox/manage.py makemigrations --check
    - name: Check PEP8 compliance
      run: pycodestyle --ignore=W504,E501 --exclude=node_modules netbox/
    - name: Check UI ESLint, TypeScript, and Prettier Compliance
      run: yarn --cwd netbox/project-static validate
    - name: Validate Static Asset Integrity
      run: scripts/verify-bundles.sh
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: coverage run --source="netbox/" netbox/manage.py test netbox/ --parallel
    - name: Show coverage report
      run: coverage report --skip-covered --omit '*/migrations/*,*/tests/*'
