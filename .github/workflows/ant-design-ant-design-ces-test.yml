name: ant-design/ant-design
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - run: bun run lint
  test-react-legacy:
    name: test-react-legacy
    strategy:
      matrix:
        react:
        - 16
        - 17
        shard:
        - 1/2
        - 2/2
    env:
      REACT: ${{ matrix.react }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - name: install react 16
      if: ${{ matrix.react == '16' }}
      run: bun run bun-install-react-16
    - name: install react 17
      if: ${{ matrix.react == '17' }}
      run: bun run bun-install-react-17
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: dom test (ces) (ces)
      run: bun run test -- --maxWorkers=2 --shard=${{matrix.shard}} --coverage
  test-node:
    name: test-node
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - run: bun run test:node
  test-react-latest:
    name: test-react-latest
    strategy:
      matrix:
        module:
        - dom
        shard:
        - 1/2
        - 2/2
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: dom test (ces) (ces)
      run: bun run test -- --maxWorkers=2 --shard=${{matrix.shard}} --coverage
    - name: persist coverages
      run: |
        mkdir persist-coverage

        mv coverage/coverage-final.json persist-coverage/react-test-${{matrix.module}}-${{strategy.job-index}}.json
    - uses: actions/upload-artifact@v4
      name: upload coverages
      with:
        name: coverage-artifacts-${{ matrix.module }}-${{ strategy.job-index }}
        path: persist-coverage/
  test-react-latest-dist:
    name: test-react-latest-dist
    strategy:
      matrix:
        module:
        - dist
        - dist-min
        shard:
        - 1/2
        - 2/2
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - name: restore cache from dist
      uses: actions/cache@v4
      with:
        path: dist
        key: dist-${{ github.sha }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: dist-min test (ces) (ces)
      if: ${{ matrix.module == 'dist-min' }}
      run: bun run test
      env:
        LIB_DIR: dist-min
    - name: dist test (ces)
      if: ${{ matrix.module == 'dist' }}
      run: bun run test
      env:
        LIB_DIR: dist
  upload-test-coverage:
    name: test-coverage
    runs-on: ubuntu-latest
    needs: test-react-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - uses: actions/download-artifact@v4
      with:
        pattern: coverage-artifacts-*
        merge-multiple: true
        path: persist-coverage
    - name: Merge Code Coverage
      run: |
        bunx nyc merge persist-coverage/ coverage/coverage-final.json

        bunx nyc report --reporter text -t coverage --report-dir coverage

        rm -rf persist-coverage
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - name: cache lib
      uses: actions/cache@v4
      with:
        path: lib
        key: lib-${{ github.sha }}
    - name: cache es
      uses: actions/cache@v4
      with:
        path: es
        key: es-${{ github.sha }}
    - name: compile
      run: bun run compile
    - name: cache dist
      uses: actions/cache@v4
      with:
        path: dist
        key: dist-${{ github.sha }}
    - name: dist
      run: bun run dist
      env:
        NODE_OPTIONS: --max_old_space_size=4096
        CI: 1
    - name: check build files
      run: node ./tests/dekko/index.test.js
    - uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      with:
        name: build artifacts
        path: >
          dist

          locale

          es

          lib
    - name: zip builds
      if: github.repository == 'ant-design/ant-design' && github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        ALI_OSS_AK_ID: ${{ secrets.ALI_OSS_AK_ID }}
        ALI_OSS_AK_SECRET: ${{ secrets.ALI_OSS_AK_SECRET }}
        HEAD_SHA: ${{ github.sha }}
      run: |
        zip -r oss-artifacts.zip dist locale es lib

        echo "🤖 Uploading"

        node scripts/visual-regression/upload.js ./oss-artifacts.zip --ref=$HEAD_SHA
  test-lib-es:
    name: test lib/es module
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
        - lib
        - es
        shard:
        - 1/2
        - 2/2
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: oven-sh/setup-bun@v2
    - run: bun install
    - name: restore cache from ${{ matrix.module }}
      if: ${{ github.event_name != 'pull_request' || matrix.module != 'lib' }}
      uses: actions/cache@v4
      with:
        path: ${{ matrix.module }}
        key: ${{ matrix.module }}-${{ github.sha }}
    - name: compile
      if: ${{ github.event_name != 'pull_request' || matrix.module != 'lib' }}
      run: bun run compile
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: test (ces) (ces)
      if: ${{ github.event_name != 'pull_request' || matrix.module != 'lib' }}
      run: bun run test -- --maxWorkers=2 --shard=${{matrix.shard}}
      env:
        LIB_DIR: ${{ matrix.module }}
