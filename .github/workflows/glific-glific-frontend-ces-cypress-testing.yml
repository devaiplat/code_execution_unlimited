name: glific/glific-frontend
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  glific:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glific_dev
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        elixir:
        - 1.15.4-otp-26
        otp:
        - 26.0.2
    steps:
    - name: Setup frontend
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Use latest Node.js (ces) (ces)
      uses: actions/setup-node@v3
    - name: Setup elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
    - name: Setup frontend
      run: |
        echo copy env file.

        cp .env.example .env

        echo done.

        cat /proc/sys/fs/inotify/max_user_watches

        echo set watchers

        sudo sysctl fs.inotify.max_user_watches=524288

        sudo sysctl -p

        cat /proc/sys/fs/inotify/max_user_watches

        echo start yarn setup.

        yarn setup

        echo done.
    - name: Setup backend
      run: |
        echo '127.0.0.1  glific.test' | sudo tee -a /etc/hosts

        echo '127.0.0.1  postgres' | sudo tee -a /etc/hosts

        echo '127.0.0.1  api.glific.test' | sudo tee -a /etc/hosts

        cd ../

        echo clone glific repo

        git clone https://github.com/glific/glific.git

        echo done. go to dir.

        cd glific

        echo done. start dev.secret.exs config

        cd priv

        mkdir cert

        cd cert

        echo "${{ secrets.TEST_CERTIFICATE }}" > glific.test+1.pem

        echo "${{ secrets.TEST_CERTIFICATE_KEY }}" > glific.test+1-key.pem

        cd ../../

        cd config

        cp dev.secret.exs.txt dev.secret.exs

        cp .env.dev.txt .env.dev

        sed -i 's/:max_rate_limit_request, 60/:max_rate_limit_request, 300/g' config.exs

        echo copy done. start setup

        cd ../

        echo install mix dependencies if not Cached

        mix local.rebar --force

        mix local.hex --force

        mix hex.repo add oban https://getoban.pro/repo --fetch-public-key ${{ secrets.OBAN_PUBLIC_KEY }} --auth-key ${{ secrets.OBAN_PRO_KEY }}

        mix deps.get

        echo start mix setup

        echo done. start installing inotify-tools

        sudo apt-get install inotify-tools

        mix setup

        cd ../glific-frontend/
    - name: Setup cypress
      run: |
        echo clone cypress repo

        git clone https://github.com/glific/cypress-testing.git

        echo done. go to dir.

        cd cypress-testing

        git checkout main

        cd ..

        cp -r cypress-testing/cypress cypress

        yarn add cypress@13.6.2

        echo Create cypress.config.ts from example

        cp cypress-testing/cypress.config.ts.example cypress.config.ts
    - name: Run glific frontend
      run: |
        yarn dev &
    - name: Run glific backend
      run: |
        cd ../glific/

        mix phx.server &

        cd ../glific-frontend/
    - name: Wait for some time for the frontend to start
      run: |
        sleep 3m
    - name: Cypress run
      run: |
        yarn run cypress run --record --key ${{ secrets.CYPRESS_DASHBOARD_KEY }}
