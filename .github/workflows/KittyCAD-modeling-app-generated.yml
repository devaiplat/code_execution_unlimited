name: KittyCAD/modeling-app
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  contents: write
  pull-requests: write
  actions: read
jobs:
  check-format:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: yarn
    - run: yarn install
    - run: yarn fmt-check
  check-types:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: yarn
    - run: yarn install
    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: ./src/wasm-lib
    - run: yarn build:wasm
    - run: yarn xstate:typegen
    - run: yarn tsc
    - name: Lint
      run: yarn eslint --max-warnings 0 src e2e packages/codemirror-lsp-client
  check-typos:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Python
      uses: actions/setup-python@v5
    - name: Install codespell
      run: |
        python -m pip install codespell
    - name: Run codespell
      run: codespell --config .codespellrc
  build-test-web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: yarn
    - run: yarn install
    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: ./src/wasm-lib
    - run: yarn build:wasm
    - run: yarn simpleserver:ci
      if: ${{ github.event_name != 'release' && github.event_name != 'schedule' }}
    - name: Install Chromium Browser
      if: ${{ github.event_name != 'release' && github.event_name != 'schedule' }}
      run: yarn playwright install chromium --with-deps
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: run unit tests (ces) (ces)
      if: ${{ github.event_name != 'release' && github.event_name != 'schedule' }}
      run: yarn test:nowatch
      env:
        VITE_KC_DEV_TOKEN: ${{ secrets.KITTYCAD_API_TOKEN_DEV }}
    - name: check for changes
      if: ${{ github.event_name != 'release' && github.event_name != 'schedule' }}
      id: git-check
      run: |
        git add src/lang/std/artifactMapGraphs

        if git status src/lang/std/artifactMapGraphs | grep -q "Changes to be committed"

        then echo "modified=true" >> $GITHUB_OUTPUT

        else echo "modified=false" >> $GITHUB_OUTPUT

        fi
    - name: Commit changes, if any
      if: ${{ github.event_name != 'release' && github.event_name != 'schedule' && steps.git-check.outputs.modified == 'true' }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

        git config --local user.name "github-actions[bot]"

        git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

        git fetch origin

        echo ${{ github.head_ref }}

        git checkout ${{ github.head_ref }}

        # TODO when webkit works on ubuntu remove the os part of the commit message

        git commit -am "Look at this (photo)Graph *in the voice of Nickelback*" || true

        git push

        git push origin ${{ github.head_ref }}
