name: nspcc-dev/neo-go
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  lint:
    name: Lint
    uses: nspcc-dev/.github/.github/workflows/go-linter.yml@master
  gomodcheck:
    name: Check internal dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Check dependencies
      run: |
        ./scripts/check_deps.sh
    - name: Check go.mod is tidy
      run: |
        go mod tidy

        if [[ $(git diff --name-only go.* | grep '' -c) != 0 ]]; then

        echo "go mod tidy should be executed before the merge, following packages are unused or out of date:";

        git diff go.*;

        exit 1;

        fi
  codegencheck:
    name: Check code generated with 'go generate' is up-to-date
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - name: Install stringer
      run: go install golang.org/x/tools/cmd/stringer@latest
    - name: Run go generate
      run: go generate ./...
    - name: Check that autogenerated code is up-to-date
      run: |
        if [[ $(git diff --name-only | grep '' -c) != 0 ]]; then

        echo "Fresh version of autogenerated code should be committed for the following files:";

        git diff --name-only;

        exit 1;

        fi
  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language:
        - go
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
  test_cover:
    name: Coverage
    runs-on: ubuntu-22.04
    env:
      CGO_ENABLED: 0
      GOEXPERIMENT: nocoverageredesign
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true
    - name: Write coverage profile
      run: DISABLE_NEOTEST_COVER=1 go test -timeout 15m -v ./... -coverprofile=./coverage.txt -covermode=atomic -coverpkg=./pkg...,./cli/...
    - name: Upload coverage results to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: true
        files: ./coverage.txt
        slug: nspcc-dev/neo-go
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
  tests:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-22.04
        - windows-2022
        - macos-12
        - macos-14
        go_versions:
        - 1.22
        - 1.23
        exclude:
        - os: windows-2022
          go_versions: 1.22
        - os: macos-12
          go_versions: 1.22
        - os: macos-14
          go_versions: 1.22
        - os: ubuntu-22.04
          go_versions: 1.23
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go_versions }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (ces) (ces)
      run: go test -timeout 15m -v -race ./...
