name: defenseunicorns/pepr
permissions: read-all
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  pepr-build:
    name: controller image
    runs-on: ubuntu-latest
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7
      with:
        egress-policy: audit
    - name: clone pepr
      uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938
      with:
        repository: ${{ github.event.inputs.repoName }}
        path: pepr
        ref: ${{ github.event.inputs.ref }}
    - name: 'set env: PEPR'
      run: echo "PEPR=${GITHUB_WORKSPACE}/pepr" >> "$GITHUB_ENV"
    - name: setup node
      uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6
      with:
        node-version: 20
        cache-dependency-path: pepr
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Prep for CLI tests (ces) (ces)
      run: |
        cd "$PEPR"

        npm ci
    - name: pepr init - displays the help menu
      run: |
        cd "$PEPR"

        npm run gen-data-json

        npx ts-node src/cli.ts init --help > result.log

        grep " \-\-name" result.log

        grep " \-\-description" result.log

        grep " \-\-errorBehavior" result.log

        grep " \-\-confirm" result.log
    - name: pepr init - creates a module with input from flags
      run: |
        cd "$PEPR"

        npm run gen-data-json

        npx ts-node src/cli.ts init \
          --name my-flagged-module \
          --description "Set by flag" \
          --errorBehavior reject \
          --confirm \
          --skip-post-init
        RESULT_FILE="my-flagged-module/package.json"

        grep "my-flagged-module" $RESULT_FILE

        grep "Set by flag" $RESULT_FILE

        grep "reject" $RESULT_FILE
    - name: pepr init - creates a module with input from stdin
      run: |
        cd "$PEPR"

        npm run gen-data-json

        echo "stdin-module" | npx ts-node src/cli.ts init \
          --description "Set by flag" \
          --errorBehavior reject \
          --confirm \
          --skip-post-init
        RESULT_FILE="stdin-module/package.json"

        grep "stdin-module" $RESULT_FILE

        grep "Set by flag" $RESULT_FILE

        grep "reject" $RESULT_FILE
