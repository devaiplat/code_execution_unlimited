name: Eventual-Inc/Daft
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  DAFT_ANALYTICS_ENABLED: 0
  UV_SYSTEM_PYTHON: 1
  PYTHON_VERSION: 3.8
jobs:
  integration-test-tpch:
    runs-on: ${{ matrix.runner-name }}
    timeout-minutes: 15
    env:
      package-name: getdaft
    strategy:
      fail-fast: false
      matrix:
        runner-name:
        - ubuntu-latest
        - buildjet-8vcpu-ubuntu-2204-arm
        daft-runner:
        - py
        - ray
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Setup Virtual Env
      run: |
        uv venv venv

        echo "$GITHUB_WORKSPACE/venv/bin" >> $GITHUB_PATH
    - name: Install Daft and dev dependencies
      run: |
        uv pip install -r requirements-dev.txt getdaft --pre --extra-index-url https://pypi.anaconda.org/daft-nightly/simple --force-reinstall

        rm -rf daft
    - uses: actions/cache@v4
      env:
        cache-name: cache-tpch-data
      with:
        path: data/tpch-dbgen
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('tests/integration/test_tpch.py', 'benchmarking/tpch/**') }}
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run TPCH integration tests (ces) (ces)
      run: |
        pytest tests/integration/test_tpch.py --durations=50
      env:
        DAFT_RUNNER: ${{ matrix.daft-runner }}
    - name: Send Slack notification on failure
      uses: slackapi/slack-github-action@v1.26.0
      if: ${{ failure() && (github.ref == 'refs/heads/main') }}
      with:
        payload: >
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rotating_light: [CI] TPCH Integration Tests on nightly wheel <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow> *FAILED on main* :rotating_light:"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  integration-test-io:
    runs-on: ${{ matrix.runner-name }}
    timeout-minutes: 30
    env:
      package-name: getdaft
    strategy:
      fail-fast: false
      matrix:
        runner-name:
        - ubuntu-latest
        - buildjet-8vcpu-ubuntu-2204-arm
        daft-runner:
        - py
        - ray
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: docker-practice/actions-setup-docker@master
      timeout-minutes: 15
      if: runner.os == 'macos'
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Setup Virtual Env
      run: |
        uv venv venv

        echo "$GITHUB_WORKSPACE/venv/bin" >> $GITHUB_PATH
    - name: Install Daft and dev dependencies
      run: |
        uv pip install -r requirements-dev.txt getdaft --pre --extra-index-url https://pypi.anaconda.org/daft-nightly/simple --force-reinstall

        rm -rf daft
    - name: Prepare tmpdirs for IO services
      run: |
        mkdir -p /tmp/daft-integration-testing/nginx

        chmod +rw /tmp/daft-integration-testing/nginx
    - name: Assume GitHub Actions AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.ACTIONS_AWS_ROLE_ARN }}
        role-session-name: DaftPythonPackageGitHubWorkflow
    - name: Spin up IO services
      uses: isbang/compose-action@v2.0.2
      with:
        compose-file: ./tests/integration/io/docker-compose/docker-compose.yml
        down-flags: --volumes
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run IO integration tests (ces) (ces)
      run: |
        pytest tests/integration/io -m 'integration and not benchmark' --durations=50
      env:
        DAFT_RUNNER: ${{ matrix.daft-runner }}
    - name: Send Slack notification on failure
      uses: slackapi/slack-github-action@v1.26.0
      if: ${{ failure() && (github.ref == 'refs/heads/main') }}
      with:
        payload: >
          {

          "blocks": [
              {
              "type": "section",
              "text": {
                  "type": "mrkdwn",
                  "text": ":rotating_light: [CI] IO Integration Tests on nightly wheel <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow> *FAILED on main* :rotating_light:"
              }
              }
          ]

          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
