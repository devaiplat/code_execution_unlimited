on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
name: r-lib/pkgdown
permissions: read-all
jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: r-lib/actions/setup-pandoc@v2
    - uses: r-lib/actions/setup-r@v2
      with:
        use-public-rspm: true
    - uses: r-lib/actions/setup-r-dependencies@v2
      with:
        extra-packages: any::covr, any::xml2
        needs: coverage
    - uses: r-lib/actions/setup-tinytex@v2
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test coverage (ces) (ces)
      run: |
        cov <- covr::package_coverage(
          quiet = FALSE,
          clean = FALSE,
          install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
        )

        covr::to_cobertura(cov)
      shell: Rscript {0}
    - uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: ${{ github.event_name != 'pull_request' && true || false }}
        file: ./cobertura.xml
        plugin: noop
        disable_search: true
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Show testthat output (ces)
      if: always()
      run: |
        ## --------------------------------------------------------------------

        find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
      shell: bash
    - name: Upload test results (ces)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-test-failures
        path: ${{ runner.temp }}/package
