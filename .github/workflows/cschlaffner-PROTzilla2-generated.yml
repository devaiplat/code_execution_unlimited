name: cschlaffner/PROTzilla2
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.11
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: >
          ~/.cache/pip

          !~/.cache/pip/log
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: >
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

        pip install flake8 pytest pytest-cov

        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Analysing the code with autoflake
      run: python -m autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports $(git ls-files '*.py')
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: run tests, build coverage file (ces) (ces)
      run: |
        export PYTHONPATH=. pytest 

        pytest --cache-clear --cov=. --cov-report term-missing tests/
    - name: format with black
      run: python -m black .
    - name: Coverage comment
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Store Pull Request comment to be posted
      uses: actions/upload-artifact@v3
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        name: python-coverage-comment-action
        path: python-coverage-comment-action.txt
