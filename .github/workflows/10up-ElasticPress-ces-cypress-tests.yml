name: 10up/ElasticPress
env:
  COMPOSER_VERSION: 2
  COMPOSER_CACHE: ${{ github.workspace }}/.composer-cache
  NODE_VERSION: 18
  NODE_CACHE: ${{ github.workspace }}/node_modules_cache
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  cypress_local:
    name: ES ${{ matrix.esVersion }} - ${{ matrix.core.name }} (${{ matrix.testGroup }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testGroup:
        - '@slow'
        - -@slow
        esVersion:
        - 7.10.1
        - 8.12.2
        core:
        - name: WP latest
          version: ''
          wcVersion: ''
        - name: WP minimum
          version: 6.0
          wcVersion: 6.4.0
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Prepare npm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.NODE_CACHE }}
        key: npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: >
          npm-${{ env.NODE_VERSION }}-
    - name: Prepare composer cache
      uses: actions/cache@v3
      with:
        path: ${{ env.COMPOSER_CACHE }}
        key: composer-${{ env.COMPOSER_VERSION }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: >
          composer-${{ env.COMPOSER_VERSION }}-
    - name: Set PHP version
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: :php-psr
        tools: cs2pr
        coverage: none
    - name: composer install
      run: composer install
    - name: Install node v${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install dependencies
      run: npm ci --include=dev
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set up WP environment with Elasticsearch
      run: ES_VERSION=${{ matrix.esVersion }} npm run env:start
    - name: Check ES response
      run: curl --connect-timeout 5 --max-time 10 --retry 5 --retry-max-time 40 --retry-all-errors http://localhost:8890
    - name: Build asset
      run: npm run build
    - name: Set up database
      run: npm run cypress:setup -- --wp-version=${{ matrix.core.version }} --wc-version=${{ matrix.core.wcVersion }}
    - name: Test (ces)
      run: npm run cypress:run -- --env grepTags=${{ matrix.testGroup }}
    - name: Make artifacts available
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-artifact-${{ matrix.esVersion }}-${{ matrix.core.name }}-${{ matrix.testGroup }}
        retention-days: 2
        path: >
          ${{ github.workspace }}/tests/cypress/screenshots/

          ${{ github.workspace }}/tests/cypress/videos/

          ${{ github.workspace }}/tests/cypress/logs/
    - name: Stop Elasticsearch
      if: always()
      run: cd bin/es-docker/ && docker compose down
    - name: Test plugin uninstall (ces)
      if: always()
      run: |
        PLUGIN_NAME=$(basename "$PWD")

        ! ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin deactivate ${PLUGIN_NAME} --network"

        ! ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin deactivate ${PLUGIN_NAME}"

        ./bin/wp-env-cli tests-wordpress "cp -r wp-content/plugins/${PLUGIN_NAME} wp-content/plugins/ep-delete"

        ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin uninstall ep-delete"
  cypress_epio:
    name: EP.io - ${{ matrix.core.name }} (${{ matrix.testGroup }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testGroup:
        - '@slow'
        - -@slow
        core:
        - name: WP latest
          version: ''
          wcVersion: ''
        - name: WP minimum
          version: 6.0
          wcVersion: 6.4.0
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Prepare npm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.NODE_CACHE }}
        key: npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: >
          npm-${{ env.NODE_VERSION }}-
    - name: Prepare composer cache
      uses: actions/cache@v3
      with:
        path: ${{ env.COMPOSER_CACHE }}
        key: composer-${{ env.COMPOSER_VERSION }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: >
          composer-${{ env.COMPOSER_VERSION }}-
    - name: Set PHP version
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: :php-psr
        tools: cs2pr
        coverage: none
    - name: composer install
      run: composer install
    - name: Install node v${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install dependencies
      run: npm ci --include=dev
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set up WP environment
      run: |
        npm run env start

        npm run env:install-tests-cli
    - name: Build asset
      run: npm run build
    - name: Set up database
      run: npm run cypress:setup -- --ep-host=${{ secrets.EPIO_HOST }} --es-shield='${{ secrets.EPIO_SHIELD }}' --ep-index-prefix=${{ secrets.EPIO_INDEX_PREFIX }} --wp-version=${{ matrix.core.version }} --wc-version=${{ matrix.core.wcVersion }}
    - name: Test (ces)
      run: npm run cypress:run -- --env grepTags=${{ matrix.testGroup }}
    - name: Make artifacts available
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-artifact-epio-${{ matrix.core.name }}-${{ matrix.testGroup }}
        retention-days: 2
        path: >
          ${{ github.workspace }}/tests/cypress/screenshots/

          ${{ github.workspace }}/tests/cypress/videos/

          ${{ github.workspace }}/tests/cypress/logs/
    - name: Delete Elasticsearch indices
      if: always()
      run: |
        PLUGIN_NAME=$(basename "$PWD")

        ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin activate ${PLUGIN_NAME} --network"

        ./bin/wp-env-cli tests-wordpress "wp --allow-root elasticpress-tests delete-all-indices"
    - name: Test plugin uninstall (ces)
      if: always()
      run: |
        PLUGIN_NAME=$(basename "$PWD")

        ! ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin deactivate ${PLUGIN_NAME} --network"

        ! ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin deactivate ${PLUGIN_NAME}"

        ./bin/wp-env-cli tests-wordpress "cp -r wp-content/plugins/${PLUGIN_NAME} wp-content/plugins/ep-delete"

        ./bin/wp-env-cli tests-wordpress "wp --allow-root plugin uninstall ep-delete"
