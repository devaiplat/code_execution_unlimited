on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ibc-go-simd
  IMAGE_NAME_WASM: ibc-go-wasm-simd
jobs:
  test-details:
    runs-on: ubuntu-latest
    steps:
    - name: Display Inputs
      run: |
        echo "Chain Image:       ${{ inputs.chain-image }}"

        echo "Chain A Tag:       ${{ inputs.chain-a-tag }}"

        echo "Chain B Tag:       ${{ inputs.chain-b-tag }}"

        echo "Chain Upgrade Tag: ${{ inputs.chain-upgrade-tag }}"

        echo "Upgrade Plan Name: ${{ inputs.upgrade-plan-name }}"

        echo "Relayer Image:"    ${{ inputs.relayer-image }}

        echo "Relayer Type:      ${{ inputs.relayer-type }}"

        echo "Relayer Tag:       ${{ inputs.relayer-tag }}"

        echo "Test Entry Point:  ${{ inputs.test-entry-point }}"

        echo "Test:              ${{ inputs.test }}"

        echo "Github Ref Name:   ${{ github.ref_name }}"
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      if: ${{ inputs.build-and-push-docker-image }}
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Log in to the Container registry
      if: ${{ inputs.build-and-push-docker-image }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      if: ${{ inputs.build-and-push-docker-image }}
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
      with:
        images: ${{ env.REGISTRY }}/cosmos/${{ env.IMAGE_NAME }}
    - name: Build and push Docker image
      if: ${{ inputs.build-and-push-docker-image }}
      uses: docker/build-push-action@32945a339266b759abcbdc89316275140b0fc960
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        build-args: >
          IBC_GO_VERSION=${{ github.ref_name }}
  docker-build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-python@v5
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      with:
        python-version: 3.10
    - name: Install dependencies
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      run: make python-install-deps
    - name: Determine Build arguments
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      id: build-args
      run: |
        echo "version=$(scripts/get-libwasm-version.py --get-version)" >> $GITHUB_OUTPUT

        echo "checksum=$(scripts/get-libwasm-version.py --get-checksum)" >> $GITHUB_OUTPUT
    - name: Log in to the Container registry
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
      with:
        images: ${{ env.REGISTRY }}/cosmos/${{ env.IMAGE_NAME_WASM }}
    - name: Build and push Docker image
      if: ${{ inputs.build-and-push-docker-image-wasm }}
      uses: docker/build-push-action@32945a339266b759abcbdc89316275140b0fc960
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        file: modules/light-clients/08-wasm/Dockerfile
        build-args: >
          LIBWASM_VERSION=${{ steps.build-args.outputs.version }}

          LIBWASM_CHECKSUM=${{ steps.build-args.outputs.checksum }}
  build-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version: 1.22
    - id: set-matrix
      run: |
        output=$(go run cmd/build_test_matrix/main.go)

        echo "matrix=$output" >> $GITHUB_OUTPUT
      env:
        TEST_ENTRYPOINT: ${{ inputs.test-entry-point }}
        TEST_EXCLUSIONS: ${{ inputs.test-exclusions }}
        TEST_NAME: ${{ inputs.test }}
  e2e-tests:
    runs-on: ubuntu-latest
    needs:
    - build-test-matrix
    - docker-build
    - docker-build-wasm
    env:
      CHAIN_IMAGE: ${{ inputs.chain-image }}
      CHAIN_A_TAG: ${{ inputs.chain-a-tag }}
      CHAIN_B_TAG: ${{ inputs.chain-b-tag }}
      RELAYER_IMAGE: ${{ inputs.relayer-image }}
      RELAYER_TAG: ${{ inputs.relayer-tag }}
      RELAYER_ID: ${{ inputs.relayer-type }}
      CHAIN_BINARY: ${{ inputs.chain-binary }}
      CHAIN_UPGRADE_TAG: ${{ inputs.chain-upgrade-tag }}
      CHAIN_UPGRADE_PLAN: ${{ inputs.upgrade-plan-name }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build-test-matrix.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version: 1.22
        cache-dependency-path: e2e/go.sum
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run e2e Test (ces) (ces)
      id: e2e_test
      run: |
        cd e2e

        make e2e-test test=${{ matrix.test }}
    - name: Upload Diagnostics
      uses: actions/upload-artifact@v4
      if: ${{ failure() && inputs.upload-logs }}
      continue-on-error: true
      with:
        name: ${{ matrix.entrypoint }}-${{ matrix.test }}
        path: e2e/diagnostics
        retention-days: 5
  e2e-test-suites:
    if: true
    runs-on: ubuntu-latest
    needs:
    - build-test-matrix
    - docker-build
    - docker-build-wasm
    env:
      CHAIN_IMAGE: ${{ inputs.chain-image }}
      CHAIN_A_TAG: ${{ inputs.chain-a-tag }}
      CHAIN_B_TAG: ${{ inputs.chain-b-tag }}
      RELAYER_IMAGE: ${{ inputs.relayer-image }}
      RELAYER_TAG: ${{ inputs.relayer-tag }}
      RELAYER_ID: ${{ inputs.relayer-type }}
      CHAIN_BINARY: ${{ inputs.chain-binary }}
      CHAIN_UPGRADE_TAG: ${{ inputs.chain-upgrade-tag }}
      CHAIN_UPGRADE_PLAN: ${{ inputs.upgrade-plan-name }}
      KEEP_CONTAINERS: true
    strategy:
      fail-fast: false
      matrix:
        include:
        - entrypoint: TestTransferTestSuite
        - entrypoint: TestAuthzTransferTestSuite
        - entrypoint: TestTransferTestSuiteSendReceive
        - entrypoint: TestTransferTestSuiteSendEnabled
        - entrypoint: TestTransferLocalhostTestSuite
        - entrypoint: TestConnectionTestSuite
        - entrypoint: TestInterchainAccountsGovTestSuite
        - entrypoint: TestIncentivizedTransferTestSuite
        - entrypoint: TestTransferForwardingTestSuite
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version: 1.22
        cache-dependency-path: e2e/go.sum
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run e2e Test (ces) (ces)
      id: e2e_test
      run: |
        cd e2e

        make e2e-suite entrypoint=${{ matrix.entrypoint }}
    - name: Upload Diagnostics
      uses: actions/upload-artifact@v4
      if: ${{ failure() && inputs.upload-logs }}
      continue-on-error: true
      with:
        name: ${{ matrix.entrypoint }}-${{ matrix.test }}
        path: e2e/diagnostics
        retention-days: 5
name: cosmos/ibc-go
