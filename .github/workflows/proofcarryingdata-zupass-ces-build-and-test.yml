name: proofcarryingdata/zupass
run-name: Build and Test
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  Build-and-Test:
    env:
      CIRCOM_VERSION: v2.1.8
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    runs-on:
      labels: ubuntu-latest-l
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: admin
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 200ms --health-timeout 200ms --health-retries 10
        ports:
        - 5432:5432
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: yarn
    - name: Cache circom and cargo
      uses: actions/cache@v3
      id: cache-circom
      with:
        path: >
          ~/.cargo/bin/

          ~/.cargo/registry/index/

          ~/.cargo/registry/cache/

          ~/.cargo/git/db/

          cibuild/circom/
        key: ${{ runner.os }}-circom-${{ env.CIRCOM_VERSION }}
    - name: Install circom (if not cached)
      if: ${{ steps.cache-circom.outputs.cache-hit != 'true' }}
      run: scripts/ci/install_circom.sh $CIRCOM_VERSION
    - name: Add cached circom to PATH (if cached)
      if: ${{ steps.cache-circom.outputs.cache-hit == 'true' }}
      run: echo '~/.cargo/bin' >> $GITHUB_PATH
    - run: yarn install
    - name: Check that yarn install did not cause changes to yarn.lock
      run: git diff --quiet -- yarn.lock
    - run: yarn check-references
    - run: yarn build
    - run: yarn lint
    - run: yarn test:ci
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test that template package works out-of-the-box (ces) (ces)
      run: yarn turbo run test-generated-package --filter='//'
