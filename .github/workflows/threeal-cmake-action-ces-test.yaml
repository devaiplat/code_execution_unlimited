name: threeal/cmake-action
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  test-package:
    name: Test Package
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node.js
      uses: actions/setup-node@v4.0.4
      with:
        node-version-file: .nvmrc
    - name: Setup Yarn
      uses: threeal/setup-yarn-action@v2.0.0
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test Package (ces) (ces)
      run: yarn test
  test-action:
    name: Test Action
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04
        - macos-14
        - windows-2022
    steps:
    - name: Checkout Sample Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Checkout Action
      uses: actions/checkout@v4.1.7
      with:
        path: cmake-action
        sparse-checkout: >
          action.yml

          dist
        sparse-checkout-cone-mode: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Build Sample Project
      id: cmake-action
      uses: ./cmake-action
    - name: Run Sample Project
      run: ${{ steps.cmake-action.outputs.build-dir }}/${{ matrix.os == 'windows-2022' && 'Debug/generate_sequence.exe' || 'generate_sequence' }} 5
  test-action-with-specified-dirs:
    name: Test Action With Specified Directories
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Sample Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
        path: project
    - name: Checkout Action
      uses: actions/checkout@v4.1.7
      with:
        path: cmake-action
        sparse-checkout: >
          action.yml

          dist
        sparse-checkout-cone-mode: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Build Sample Project
      id: cmake-action
      uses: ./cmake-action
      with:
        source-dir: project
        build-dir: output
    - name: Run Sample Project
      run: output/generate_sequence 5
  test-action-without-run-build:
    name: Test Action Without Run Build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Sample Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Checkout Action
      uses: actions/checkout@v4.1.7
      with:
        path: cmake-action
        sparse-checkout: >
          action.yml

          dist
        sparse-checkout-cone-mode: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Modify Sample Project
      run: echo 'invalid' >> src/main.cpp
    - name: Configure Sample Project
      uses: ./cmake-action
      with:
        run-build: false
  test-action-with-additional-options:
    name: Test Action With Additional Options
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Sample Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Checkout Action
      uses: actions/checkout@v4.1.7
      with:
        path: cmake-action
        sparse-checkout: >
          action.yml

          dist
        sparse-checkout-cone-mode: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Build Sample Project
      uses: ./cmake-action
      with:
        options: BUILD_TESTING=ON
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Test Sample Project (ces) (ces)
      uses: threeal/ctest-action@v1.1.0
  test-action-with-custom-generator:
    name: Test Action With Custom Generator
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Sample Project
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Checkout Action
      uses: actions/checkout@v4.1.7
      with:
        path: cmake-action
        sparse-checkout: >
          action.yml

          dist
        sparse-checkout-cone-mode: false
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v5
    - name: Configure Sample Project
      id: cmake-action
      uses: ./cmake-action
      with:
        generator: Ninja
        run-build: false
    - name: Build Sample Project
      run: ninja -C ${{ steps.cmake-action.outputs.build-dir }}
