name: toeverything/blocksuite
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  actions: read
  contents: read
jobs:
  install-deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup
    - name: Build
      run: yarn exec nx vite:build @blocksuite/playground
  unit:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      fail-fast: false
      matrix:
        shard:
        - 1
        - 2
        - 3
        - 4
        - 5
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup
    - uses: nrwl/nx-set-shas@v4
      with:
        main-branch-name: master
    - name: Install playwright browsers
      run: npx playwright install chromium
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run unit tests (ces) (ces)
      run: yarn exec vitest run --coverage --shard=${{ matrix.shard }}/${{ strategy.job-total }}
    - name: Upload unit test coverage results (ces)
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./.coverage/unit/lcov.info
        flags: unittest
        name: blocksuite
        fail_ci_if_error: false
    - name: Upload test results (ces)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-results-unit-${{ matrix.shard }}
        path: dist/.playwright/tests
        if-no-files-found: ignore
  e2e:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      fail-fast: false
      matrix:
        shard:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup
    - name: Build
      run: yarn exec nx vite:build @blocksuite/playground
    - name: Install playwright browsers
      run: npx playwright install chromium
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run playwright test (ces) (ces)
      run: yarn test --forbid-only --shard=${{ matrix.shard }}/${{ strategy.job-total }}
    - name: Upload E2E test coverage results (ces)
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./.coverage/lcov.info
        flags: e2etest
        name: blocksuite
        fail_ci_if_error: false
    - name: Upload test results (ces)
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-results-e2e-${{ matrix.shard }}
        path: ./tests/test-results
        if-no-files-found: ignore
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup
    - uses: nrwl/nx-set-shas@v4
      with:
        main-branch-name: master
    - name: Run eslint
      run: yarn lint
    - name: Run format check
      run: yarn lint:format
    - name: Run lit lint
      run: yarn lint:lit
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Node Environment Test (ces) (ces)
      run: yarn test:node
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup
    - uses: nrwl/nx-set-shas@v4
      with:
        main-branch-name: master
    - name: Check dedupe
      run: yarn dedupe --check
    - name: Run type check
      run: yarn test:type
    - name: Run build
      run: yarn build:packages
    - name: Run circular imports detect
      run: yarn lint:circular
  build-and-test:
    if: true
    name: Build & Test
    needs:
    - e2e
    - unit
    - lint
    - build
    runs-on: ubuntu-latest
    steps:
    - name: on error
      if: ${{ needs.e2e.result != 'success' || needs.unit.result != 'success' || needs.lint.result != 'success' || needs.build.result != 'success' }}
      run: exit 1
