name: graasp/graasp
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.head_ref || github.ref }}
env:
  CI: true
  LOG_LEVEL: fatal
  APPS_JWT_SECRET: ${{ vars.MOCK_APPS_JWT_SECRET }}
  APPS_PUBLISHER_ID: 9c9cea73-f3b7-48a3-aa6e-ead82c0685e7
  AUTH_CLIENT_HOST: localhost:3001
  AUTH_TOKEN_JWT_SECRET: ${{ vars.MOCK_AUTH_TOKEN_JWT_SECRET }}
  BUILDER_CLIENT_HOST: http://localhost:3111
  ACCOUNT_CLIENT_HOST: http://localhost:3114
  ANALYTICS_CLIENT_HOST: http://localhost:3005
  COOKIE_DOMAIN: localhost
  DB_PASSWORD: docker
  DB_USERNAME: docker
  DB_NAME: docker
  DB_HOST: localhost
  EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN: http://localhost:1234
  ETHERPAD_API_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  ETHERPAD_PUBLIC_URL: http://localhost:9001
  ETHERPAD_URL: http://etherpad:9001
  LIBRARY_CLIENT_HOST: http://localhost:3113
  FILE_STORAGE_ROOT_PATH: /
  H5P_FILE_STORAGE_TYPE: file
  H5P_PATH_PREFIX: h5p-content/
  H5P_STORAGE_ROOT_PATH: /tmp/h5p
  H5P_FILE_STORAGE_HOST: http://localhost:1081
  JWT_SECRET: ${{ vars.MOCK_JWT_SECRET }}
  PASSWORD_RESET_JWT_SECRET: ${{ vars.MOCK_PASSWORD_RESET_JWT_SECRET }}
  EMAIL_CHANGE_JWT_SECRET: ${{ vars.MOCK_EMAIL_CHANGE_JWT_SECRET }}
  MAILER_CONFIG_PASSWORD: password
  MAILER_CONFIG_SMTP_HOST: localhost
  MAILER_CONFIG_USERNAME: username
  PLAYER_CLIENT_HOST: http://localhost:3112
  RECAPTCHA_SECRET_ACCESS_KEY: iamamockkey
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REFRESH_TOKEN_JWT_SECRET: ${{ vars.MOCK_REFRESH_TOKEN_JWT_SECRET }}
  S3_FILE_ITEM_ACCESS_KEY_ID: graasp-user
  S3_FILE_ITEM_BUCKET: graasp
  S3_FILE_ITEM_PLUGIN: true
  S3_FILE_ITEM_REGION: us-east-1
  S3_FILE_ITEM_SECRET_ACCESS_KEY: graasp-pwd
  SECURE_SESSION_SECRET_KEY: ${{ vars.MOCK_SECURE_SESSION_SECRET_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  MEILISEARCH_URL: fake
  MEILISEARCH_MASTER_KEY: fake
  JOB_SCHEDULING: false
  GEOLOCATION_API_KEY: geolocation-key
  GEOLOCATION_API_HOST: http://localhost:12345
jobs:
  build-node:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: >
          ${{ runner.os }}-yarn-
    - name: yarn install and build
      run: |
        yarn

        yarn build
    - name: yarn check
      run: yarn check
    - name: apply migrations on empty database
      run: yarn migration:run
    - name: check migrations are synced with the current codebase
      run: yarn migration:check
  test-node:
    needs: build-node
    strategy:
      matrix:
        shard:
        - 1/4
        - 2/4
        - 3/4
        - 4/4
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      postgres-2:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
        - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      graasp-redis:
        image: redis
        ports:
        - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Get yarn cache directory
      id: yarn-cache-dir-path
      run: |
        echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: >
          ${{ runner.os }}-yarn-
    - uses: actions/cache@v4
      with:
        path: .jest-cache
        key: ${{ runner.os }}-jest-${{ hashFiles('**/yarn.lock') }}
        restore-keys: >
          ${{ runner.os }}-jest-
    - name: yarn install
      run: |
        yarn
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: yarn test (ces) (ces)
      run: yarn test:ci --shard=${{ matrix.shard }}
