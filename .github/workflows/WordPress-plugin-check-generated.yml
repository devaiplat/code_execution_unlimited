name: WordPress/plugin-check
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
jobs:
  behat-test:
    name: PHP ${{ matrix.php }} - WP ${{ matrix.wordpress }}${{ matrix.experimental && ' (experimental)' || '' }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental == true }}
    timeout-minutes: 20
    services:
      mysql:
        image: mysql:8.0
        ports:
        - 3306/tcp
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=wp_cli_test --entrypoint sh mysql:8.0 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
    strategy:
      fail-fast: true
      matrix:
        php:
        - 7.2
        - 7.3
        - 7.4
        - 8.0
        - 8.1
        wordpress:
        - latest
        include:
        - php: 8.2
          wordpress: latest
          coverage: true
        - php: 7.2
          wordpress: 6.3
        - php: 8.3
          wordpress: trunk
          experimental: true
        - php: 8.4
          wordpress: trunk
          experimental: true
    env:
      WP_ENV_PHP_VERSION: ${{ matrix.php }}
      WP_ENV_CORE: ${{ matrix.wordpress == 'trunk' && 'WordPress/WordPress' || format( 'https://wordpress.org/wordpress-{0}.zip', matrix.wordpress ) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        extensions: mysql
        tools: composer
        php-version: ${{ matrix.php }}
        coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}
        ini-values: pcov.directory=.,pcov.exclude=~(vendor|tests)~
    - name: Install PHP dependencies
      uses: ramsey/composer-install@57532f8be5bda426838819c5ee9afb8af389d51a
      with:
        composer-options: --prefer-dist
    - name: Make Composer packages available globally
      run: |
        echo "${PWD}/vendor/bin" >> $GITHUB_PATH
    - name: Install WP-CLI
      run: |
        curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

        chmod +x wp-cli.phar

        mkdir -p bin

        mv wp-cli.phar bin/wp

        echo "WP_CLI_BIN_DIR=${PWD}/bin" >> $GITHUB_ENV
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Update PHPUnit to get latest php-code-coverage library (ces) (ces)
      if: ${{ matrix.coverage == true }}
      run: |
        composer require --dev --ignore-platform-reqs --update-with-all-dependencies phpunit/phpunit
    - name: Start MySQL server
      run: sudo systemctl start mysql
    - name: Configure DB environment
      run: |
        echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV

        echo "MYSQL_TCP_PORT=${{ job.services.mysql.ports['3306'] }}" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBROOTUSER=root" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBROOTPASS=root" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBNAME=wp_cli_test" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBUSER=wp_cli_test" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBPASS=password1" >> $GITHUB_ENV

        echo "WP_CLI_TEST_DBHOST=127.0.0.1:${{ job.services.mysql.ports['3306'] }}" >> $GITHUB_ENV
    - name: Prepare test database (ces)
      run: composer prepare-behat-tests
    - name: Check Behat environment
      run: composer behat
      env:
        WP_CLI_TEST_DEBUG_BEHAT_ENV: 1
    - name: Run tests (ces)
      env:
        BEHAT_CODE_COVERAGE: ${{ matrix.coverage }}
      run: composer behat || composer behat-rerun
    - name: Retrieve list of coverage files
      id: coverage_files
      if: ${{ matrix.coverage == true }}
      run: |
        FILES=$(ls -d -1 "$GITHUB_WORKSPACE/build/logs/clover-behat/"*.* | paste --serial --delimiters=",")

        test -n "$FILES"

        echo "Coverage files: $FILES"

        echo "files=$FILES" >> $GITHUB_OUTPUT
    - name: Upload code coverage report
      if: ${{ matrix.coverage }}
      uses: codecov/codecov-action@v4.5.0
      with:
        files: ${{ steps.coverage_files.outputs.files }}
        flags: feature
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
