name: GenericMappingTools/gmt
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
defaults:
  run:
    shell: bash -el {0}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}
jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      COASTLINEDIR: ${{ github.workspace }}/coastline
      INSTALLDIR: ${{ github.workspace }}/gmt-install-dir
      GMT_END_SHOW: off
      BUILD_DOCS: false
      PACKAGE: false
      RUN_TESTS: true
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: Linux
          os: ubuntu-latest
        - name: macOS
          os: macos-13
        - name: Windows
          os: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup vcpkg (Windows)
      run: gh run download -n vcpkg-cache -D C:/vcpkg/installed/
      if: runner.os == 'Windows'
      env:
        GH_TOKEN: ${{ github.token }}
    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v3
      if: runner.os == 'macOS'
    - name: Install GMT dependencies
      run: |
        # $RUNNER_OS can be Linux, macOS or Windows

        # The following command converts $RUNNER_OS to lowercase

        os=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')

        bash ci/install-dependencies-${os}.sh
      env:
        EXCLUDE_OPTIONAL: ${{ matrix.EXCLUDE_OPTIONAL }}
    - name: Add Ghostscript registry so that GraphicsMagick can find it [Windows]
      shell: pwsh
      run: |
        New-Item -Path "HKLM:\Software\GPL Ghostscript"

        New-Item -Path "HKLM:\Software\GPL Ghostscript\10.03.0"

        New-ItemProperty -Path "HKLM:\Software\GPL Ghostscript\10.03.0" -Name GS_DLL -PropertyType String -Value "C:\Miniconda\Library\bin\gsdll64.dll"

        New-ItemProperty -Path "HKLM:\Software\GPL Ghostscript\10.03.0" -Name GS_LIB -PropertyType String -Value "C:\Miniconda\Library\bin;C:\Miniconda\Library\lib;C\Miniconda\Library\Font;C:\Miniconda\Library\fonts"
      if: runner.os == 'Windows'
    - name: Download GSHHG and DCW data
      run: gh run download -n coastline-cache -D coastline
      env:
        GH_TOKEN: ${{ github.token }}
    - name: Configure GMT
      run: |
        if [ "$RUNNER_OS" != "Windows" ]; then
          bash ci/config-gmt-unix.sh
        else
          bash ci/config-gmt-windows.sh
        fi
    - name: Compile GMT (Linux/macOS)
      run: |
        mkdir build

        cd build

        cmake -G Ninja ..

        cmake --build .
      if: runner.os != 'Windows'
    - name: Compile GMT (Windows)
      shell: cmd
      run: |
        mkdir build

        cd build

        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        cmake -G Ninja .. -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=Release

        cmake --build .
      if: runner.os == 'Windows'
    - name: Pull baseline image data from dvc remote
      run: dvc pull --no-run-cache
    - name: Install GMT
      run: |
        cd build

        cmake --build . --target install

        # Add GMT PATH to bin

        echo "${INSTALLDIR}/bin" >> $GITHUB_PATH
    - name: Download cached GMT remote data from GitHub Artifacts
      run: gh run download -n gmt-cache -D ~/.gmt/static/
      env:
        GH_TOKEN: ${{ github.token }}
    - name: Check a few simple commands
      run: bash ci/simple-gmt-tests.sh
    - name: Check a few simple commands (Windows)
      shell: cmd
      run: call ci/simple-gmt-tests.bat
      if: runner.os == 'Windows'
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run full tests (ces) (ces)
      run: |
        set -x -e

        cd build

        # Disable MinGW's path conversion, see #1035.

        if [ "$RUNNER_OS" == "Windows" ]; then export MSYS_NO_PATHCONV=1; fi

        # Run tests

        ctest ${CTEST_ARGS} || ctest ${CTEST_ARGS} --rerun-failed || ctest ${CTEST_ARGS} --rerun-failed

        # show the slowest tests

        sort -k3nr Testing/Temporary/CTestCostData.txt > /tmp/cost.txt

        head -n 30 /tmp/cost.txt | awk 'NF==3 {printf("%50-s %d %5.1f\n", $1, $2, $3)}'
      env:
        CTEST_ARGS: --output-on-failure --force-new-ctest-process -j4 --timeout 480
    - name: Run DOS batch examples (Windows)
      shell: cmd
      run: |
        cd doc/examples

        call do_examples.bat
      if: runner.os == 'Windows'
    - name: Upload build directory if failed
      uses: actions/upload-artifact@v4
      with:
        name: BuildDirectory-${{ runner.os }}
        path: build/
      if: failure()
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.5.0
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        fail_ci_if_error: false
        gcov: true
      if: always()
