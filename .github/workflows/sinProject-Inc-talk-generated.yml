name: sinProject-Inc/talk
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  check:
    name: Lint Check, Type Check, Svelte Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - uses: ./.github/actions/setup-and-cache
    - name: Create .env
      run: |
        touch .env

        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env

        echo SOUND_DIR=${{ secrets.SOUND_DIR }} >> .env

        echo AVATAR_DIR=${{ secrets.AVATAR_DIR }} >> .env

        echo GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} >> .env

        echo GOOGLE_LOCATION=${{ secrets.GOOGLE_LOCATION }} >> .env

        echo MICROSOFT_SPEECH_KEY=${{ secrets.MICROSOFT_SPEECH_KEY }} >> .env

        echo DEEPL_AUTH_KEY=${{ secrets.DEEPL_AUTH_KEY }} >> .env

        echo GMAIL_USER=${{ secrets.GMAIL_USER }} >> .env

        echo GMAIL_PASS=${{ secrets.GMAIL_PASS }} >> .env
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build
      shell: bash
      run: npm run build
    - name: Lint Check
      run: npm run lint
    - name: Type Check
      run: npm run typecheck
    - name: Svelte Check
      run: npm run check
  tests:
    name: Vitest Test, Playwright Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DATABASE_URL: mysql://root:rootroot@127.0.0.1:3306/talk
    services:
      mysql:
        image: mysql
        ports:
        - 3306:3306
        env:
          MYSQL_DATABASE: talk
          MYSQL_ROOT_USER: root
          MYSQL_ROOT_PASSWORD: rootroot
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
        - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
    - uses: ./.github/actions/setup-and-cache
    - uses: ./.github/actions/prisma
    - name: Create .env
      run: |
        touch .env

        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env

        echo SOUND_DIR=${{ secrets.SOUND_DIR }} >> .env

        echo AVATAR_DIR=${{ secrets.AVATAR_DIR }} >> .env

        echo GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} >> .env

        echo GOOGLE_LOCATION=${{ secrets.GOOGLE_LOCATION }} >> .env

        echo MICROSOFT_SPEECH_KEY=${{ secrets.MICROSOFT_SPEECH_KEY }} >> .env

        echo DEEPL_AUTH_KEY=${{ secrets.DEEPL_AUTH_KEY }} >> .env

        echo GMAIL_USER=${{ secrets.GMAIL_USER }} >> .env

        echo GMAIL_PASS=${{ secrets.GMAIL_PASS }} >> .env
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Build
      shell: bash
      run: npm run build
    - name: Vitest Test and coverage (ces)
      run: npx vitest run --coverage
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
    - name: Install Playwright Browsers
      run: npx playwright install chromium
    - name: Playwright Test (ces)
      run: npm run test:e2e
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: logs
        path: logs/
        retention-days: 30
