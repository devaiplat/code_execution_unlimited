name: onflow/flow-go
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
env:
  GO_VERSION: 1.22
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true
jobs:
  golangci:
    strategy:
      fail-fast: false
      matrix:
        dir:
        - ./
        - ./integration/
        - ./insecure/
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Run go generate
      run: go generate ./...
      working-directory: ${{ matrix.dir }}
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54
        args: -v
        working-directory: ${{ matrix.dir }}
        skip-cache: true
  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Run tidy
      run: make tidy
    - name: code sanity check
      run: make code-sanity-check
  create-dynamic-test-matrix:
    name: Create Dynamic Test Matrix
    runs-on: ubuntu-latest
    outputs:
      dynamic-matrix: ${{ steps.set-test-matrix.outputs.dynamicMatrix }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set Test Matrix (ces) (ces)
      id: set-test-matrix
      run: go run tools/test_matrix_generator/matrix.go
  create-insecure-dynamic-test-matrix:
    name: Create Dynamic Unit Test Insecure Package Matrix
    runs-on: ubuntu-latest
    outputs:
      dynamic-matrix: ${{ steps.set-test-matrix.outputs.dynamicMatrix }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set Test Matrix (ces) (ces)
      id: set-test-matrix
      run: go run tools/test_matrix_generator/matrix.go -c insecure
  create-integration-dynamic-test-matrix:
    name: Create Dynamic Integration Test Package Matrix
    runs-on: ubuntu-latest
    outputs:
      dynamic-matrix: ${{ steps.set-test-matrix.outputs.dynamicMatrix }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Set Test Matrix (ces) (ces)
      id: set-test-matrix
      run: go run tools/test_matrix_generator/matrix.go -c integration
  unit-test:
    name: Unit Tests (${{ matrix.targets.name }})
    needs: create-dynamic-test-matrix
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJSON(needs.create-dynamic-test-matrix.outputs.dynamic-matrix)}}
    runs-on: ${{ matrix.targets.runner }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Setup tests (${{ matrix.targets.name }}) (ces) (ces)
      run: VERBOSE=1 make -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" install-tools
    - name: Run tests (${{ matrix.targets.name }}) (ces)
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 35
        max_attempts: 5
        command: VERBOSE=1 make -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" test
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      timeout-minutes: 1
      continue-on-error: true
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
  unit-test-insecure:
    name: Unit Tests Insecure (${{ matrix.targets.name }})
    needs: create-insecure-dynamic-test-matrix
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJSON(needs.create-insecure-dynamic-test-matrix.outputs.dynamic-matrix)}}
    runs-on: ${{ matrix.targets.runner }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Setup tests (${{ matrix.targets.name }}) (ces) (ces)
      run: VERBOSE=1 make -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" install-tools
    - name: Run tests (${{ matrix.targets.name }}) (ces)
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 35
        max_attempts: 5
        command: VERBOSE=1 make -C ./insecure -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" test
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      timeout-minutes: 1
      continue-on-error: true
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
  docker-build:
    name: Docker Build
    runs-on: buildjet-16vcpu-ubuntu-2204
    env:
      CADENCE_DEPLOY_KEY: ${{ secrets.CADENCE_DEPLOY_KEY }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Docker build
      env:
        CADENCE_DEPLOY_KEY: ${{ secrets.CADENCE_DEPLOY_KEY }}
      run: make docker-native-build-flow docker-native-build-flow-corrupt
    - name: Save Docker images
      run: |
        docker save \

        gcr.io/flow-container-registry/access:latest \

        gcr.io/flow-container-registry/collection:latest \

        gcr.io/flow-container-registry/consensus:latest \

        gcr.io/flow-container-registry/execution:latest \

        gcr.io/flow-container-registry/ghost:latest \

        gcr.io/flow-container-registry/observer:latest \

        gcr.io/flow-container-registry/verification:latest \

        gcr.io/flow-container-registry/access-corrupted:latest \

        gcr.io/flow-container-registry/execution-corrupted:latest \

        gcr.io/flow-container-registry/verification-corrupted:latest > flow-docker-images.tar
    - name: Cache Docker images
      uses: actions/cache@v3
      with:
        path: flow-docker-images.tar
        key: flow-docker-images-${{ hashFiles('**/Dockerfile') }}-${{ github.run_id }}
  integration-test-others:
    name: Integration Tests Others (${{ matrix.targets.name }})
    needs: create-integration-dynamic-test-matrix
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJSON(needs.create-integration-dynamic-test-matrix.outputs.dynamic-matrix)}}
    runs-on: ${{ matrix.targets.runner }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Setup tests (${{ matrix.targets.name }}) (ces) (ces)
      run: VERBOSE=1 make -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" install-tools
    - name: Run tests (${{ matrix.targets.name }}) (ces)
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 35
        max_attempts: 5
        command: VERBOSE=1 make -C ./integration -e GO_TEST_PACKAGES="${{ matrix.targets.packages }}" test
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      timeout-minutes: 1
      continue-on-error: true
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
  integration-test:
    name: Integration Tests
    needs: docker-build
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: Access Cohort1 Integration Tests
          make: make -C integration access-cohort1-tests
          runner: buildjet-4vcpu-ubuntu-2204
        - name: Access Cohort2 Integration Tests
          make: make -C integration access-cohort2-tests
          runner: ubuntu-latest
        - name: Access Cohort3 Integration Tests
          make: make -C integration access-cohort3-tests
          runner: ubuntu-latest
        - name: BFT (Protocol) Integration Tests
          make: make -C integration bft-protocol-tests
          runner: buildjet-8vcpu-ubuntu-2204
        - name: BFT (Gossipsub) Integration Tests
          make: make -C integration bft-gossipsub-tests
          runner: ubuntu-latest
        - name: Collection Integration Tests
          make: make -C integration collection-tests
          runner: ubuntu-latest
        - name: Consensus Integration Tests
          make: make -C integration consensus-tests
          runner: ubuntu-latest
        - name: Epoch Cohort1 Integration Tests
          make: make -C integration epochs-cohort1-tests
          runner: buildjet-8vcpu-ubuntu-2204
        - name: Epoch Cohort2 Integration Tests
          make: make -C integration epochs-cohort2-tests
          runner: buildjet-4vcpu-ubuntu-2204
        - name: Execution Integration Tests
          make: make -C integration execution-tests
          runner: ubuntu-latest
        - name: Ghost Integration Tests
          make: make -C integration ghost-tests
          runner: ubuntu-latest
        - name: MVP Integration Tests
          make: make -C integration mvp-tests
          runner: ubuntu-latest
        - name: Network Integration Tests
          make: make -C integration network-tests
          runner: ubuntu-latest
        - name: Verification Integration Tests
          make: make -C integration verification-tests
          runner: ubuntu-latest
        - name: Upgrade Integration Tests
          make: make -C integration upgrades-tests
          runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      timeout-minutes: 10
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Load cached Docker images
      uses: actions/cache@v3
      with:
        path: flow-docker-images.tar
        key: flow-docker-images-${{ hashFiles('**/Dockerfile') }}-${{ github.run_id }}
    - name: Load Docker images
      run: docker load -i flow-docker-images.tar
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run tests (${{ matrix.name }}) (ces) (ces)
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 35
        max_attempts: 5
        command: VERBOSE=1 ${{ matrix.make }}
