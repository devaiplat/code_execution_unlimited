name: treeverse/lakeFS
on:
  workflow_dispatch:
    inputs:
      repoName:
        description: Name of the repo
        required: false
      patch:
        description: Base64 encoded patch content
        required: false
      command:
        description: Command to run
        required: false
      ref:
        description: The repo branch, tag, or commit SHA to checkout
        required: false
jobs:
  validator:
    name: Run Linters and Checkers
    runs-on: ubuntu-22.04
    steps:
    - name: Check-out code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.6
    - uses: actions/setup-node@v4
      with:
        node-version: 18.17.0
        cache: npm
        cache-dependency-path: webui/package-lock.json
    - uses: bufbuild/buf-setup-action@v1.28.1
      with:
        github_token: ${{ github.token }}
    - name: Generate code
      env:
        NODE_OPTIONS: --max-old-space-size=4096
      run: |
        make gen

        make validate-clients-untracked-files
    - name: Checks validator
      env:
        GOLANGCI_LINT_FLAGS: --out-format github-actions
      run: make checks-validator
  test-go:
    name: Run Go tests
    runs-on: ubuntu-22.04
    steps:
    - name: Check-out code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repoName }}
        ref: ${{ github.event.inputs.ref }}
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22.6
    - name: Apply patch
      shell: bash
      run: |

                if [ -n "${{ github.event.inputs.patch }}" ]; then
                   echo "Patch input provided. Applying patch..."
                   echo "${{ github.event.inputs.patch }}" | base64 --decode | sed 's/\r$//'  > patch.diff
                   echo "Decoded patch content:"
                   cat patch.diff 
                   echo "Apply the patch:"
                   git apply --verbose patch.diff
                 else
                   echo "No patch input provided. Skipping patch application."
                 fi
                echo "Print git diff on local repo"
                git diff
    - name: Run custom command
      shell: bash
      run: |
         
                if [ -n "${{ github.event.inputs.command }}" ]; then
                   echo "Start running custom command"
                   echo "${{ github.event.inputs.command }}"
                   output=$(echo "${{ github.event.inputs.command }}" | base64 --decode | sed 's/\r$//')
                   echo "Decoded custom command is:"
                   echo $output
                   echo "!!==================================!!"
                   echo "Custom command output:"
                   echo "!!==================================!!"
                   eval $output
                   echo "!!==================================!!"
                   echo "RAN_CUSTOM_COMMAND=true" >> $GITHUB_ENV
                   echo "Finished running custom command!"
                   echo "!!== RUN COMPLETED ==!!"
                fi
    - name: Exit if custom command was run
      if: env.RAN_CUSTOM_COMMAND == 'true'
      shell: bash
      run: |

                echo "Exiting job after custom command run"
                exit 1
    - name: Run Go tests (ces) (ces)
      run: |
        mkdir ./webui/dist

        touch ./webui/dist/index.html         

        make test-go
